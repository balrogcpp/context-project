//MIT License
//
//Copyright (c) 2020 Andrey Vasiliev
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

vertex_program PbrReflection_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,REFLECTION,SHADOWRECEIVER
}

fragment_program PbrReflection_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_NORMALMAP,HAS_METALLICMAP,HAS_ROUGHNESSMAP,HAS_PARALLAXMAP,REFLECTION,SHADOWRECEIVER
}

material PbrReflection
{
    technique
    {
      pass
      {
            diffuse 1 1 1
            specular 1 1 1 1
            ambient 0 0 0

            texture_unit Albedo {}
            texture_unit Normal {}
            texture_unit Metallic
            {
                texture white.dds
            }
            texture_unit Roughness
            {
                texture white.dds
            }
            texture_unit Offset
            {
                texture black.dds
            }
            texture_unit ReflectionMap {}
            texture_unit NoiseMap
            {
                texture noise_fresnel.dds
                filtering bilinear
            }

            vertex_program_ref PbrReflection_vs {}

			fragment_program_ref PbrReflection_fs
			{
                param_named uBaseColorSampler   int 0
                param_named uNormalSampler    int 1
                param_named uMetallicSampler int 2
                param_named uRoughnessSampler int 3
                param_named uOffsetSampler int 4
                param_named uReflectionMap int 5
                param_named uNoiseMap int 6
			}
        }
    }
}