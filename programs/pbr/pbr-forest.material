/*
MIT License

Copyright (c) 2020 Andrey Vasiliev

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PbrForest_vs_glsl glsl
{
	source pbr.vert
    preprocessor_defines FOREST,FADE,HAS_NORMALS,HAS_TANGENTS,HAS_UV
}

vertex_program PbrForest_vs_glsles glsles
{
	source pbr.vert
    preprocessor_defines FOREST,FADE,HAS_NORMALS,HAS_TANGENTS,HAS_UV
}

vertex_program PbrForest_vs unified
{
	delegate PbrForest_vs_glsl
	delegate PbrForest_vs_glsles
}


fragment_program PbrForest_fs_glsl glsl
{
	source pbr.frag
    preprocessor_defines FADE,HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP
}

fragment_program PbrForest_fs_glsles glsles
{
	source pbr.frag
    preprocessor_defines FADE,HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP
}

fragment_program PbrForest_fs unified
{
	delegate PbrForest_fs_glsl
	delegate PbrForest_fs_glsles
}

material PbrForest
{
    receive_shadows off

    technique
    {
      pass
      {
            specular 1 1 1 1
            ambient 0 0 0

            texture_unit Albedo {}

			vertex_program_ref PbrForest_vs {}

			fragment_program_ref PbrForest_fs
			{
                param_named uBaseColorSampler   int 0
			}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment_program PbrForest_Shadowed_fs_glsl glsl
{
	source pbr.frag
    preprocessor_defines FADE,HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,SHADOWRECEIVER
}

fragment_program PbrForest_Shadowed_fs_glsles glsles
{
	source pbr.frag
    preprocessor_defines FADE,HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,SHADOWRECEIVER
}

fragment_program PbrForest_Shadowed_fs unified
{
	delegate PbrForest_Shadowed_fs_glsl
	delegate PbrForest_Shadowed_fs_glsles
}

vertex_program PbrForest_Shadowed_vs_glsl glsl
{
	source pbr.vert
    preprocessor_defines FOREST,FADE,HAS_NORMALS,HAS_TANGENTS,HAS_UV,SHADOWRECEIVER
}

vertex_program PbrForest_Shadowed_vs_glsles glsles
{
	source pbr.vert
    preprocessor_defines FOREST,FADE,HAS_NORMALS,HAS_TANGENTS,HAS_UV,SHADOWRECEIVER
}

vertex_program PbrForest_Shadowed_vs unified
{
	delegate PbrForest_Shadowed_vs_glsl
	delegate PbrForest_Shadowed_vs_glsles
}

material PbrForest_Shadowed
{
    technique
    {
      pass
      {
            specular 1 1 1 1
            ambient 0 0 0

            texture_unit Albedo {}

			vertex_program_ref PbrForest_Shadowed_vs {}

			fragment_program_ref PbrForest_Shadowed_fs
			{
                param_named uBaseColorSampler   int 0
			}
        }
    }
}