//MIT License
//
//Copyright (c) 2020 Andrey Vasiliev
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

vertex_program PSSM/shadow_caster_vs glsl glsles
{
	source pbr.vert
	preprocessor_defines SHADOWCASTER,SHADOWCASTER_ALPHA

	default_params
	{
		param_named_auto uMVPMatrix worldviewproj_matrix
		param_named_auto uModelMatrix world_matrix
	}
}

fragment_program PSSM/shadow_caster_fs glsl glsles
{
	source pbr.frag
	preprocessor_defines SHADOWCASTER,SHADOWCASTER_ALPHA

	default_params
	{
	    param_named uBaseColorSampler int 0
	}
}

material PSSM/shadow_caster
{
	technique
	{
		pass
		{
            texture_unit BaseColor {}

			vertex_program_ref PSSM/shadow_caster_vs {}

			fragment_program_ref PSSM/shadow_caster_fs {}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PSSM/NoAlpha/shadow_caster_vs glsl glsles
{
	source pbr.vert
	preprocessor_defines SHADOWCASTER

	default_params
	{
		param_named_auto uMVPMatrix worldviewproj_matrix
		param_named_auto uModelMatrix world_matrix
	}
}

fragment_program PSSM/NoAlpha/shadow_caster_fs glsl glsles
{
	source pbr.frag
	preprocessor_defines SHADOWCASTER
}

material PSSM/NoAlpha/shadow_caster
{
	technique
	{
		pass
		{
			vertex_program_ref PSSM/NoAlpha/shadow_caster_vs {}

			fragment_program_ref PSSM/NoAlpha/shadow_caster_fs {}
		}
	}
}