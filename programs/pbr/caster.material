/*
MIT License

Copyright (c) 2020 Andrey Vasiliev

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

vertex_program PSSM/shadow_caster_vsGLSL glsl
{
	source pbr.vert
	preprocessor_defines SHADOWCASTER,SHADOWCASTER_ALPHA
}

vertex_program PSSM/shadow_caster_vsGLSLES glsles
{
	source pbr.vert
	preprocessor_defines SHADOWCASTER,SHADOWCASTER_ALPHA
}

vertex_program PSSM/shadow_caster_vs unified
{
	delegate PSSM/shadow_caster_vsGLSL
	delegate PSSM/shadow_caster_vsGLSLES

	default_params
	{
		param_named_auto uMVPMatrix worldviewproj_matrix
	}
}

fragment_program PSSM/shadow_caster_fsGLSL glsl
{
	source pbr.frag
	preprocessor_defines SHADOWCASTER,SHADOWCASTER_ALPHA
}

fragment_program PSSM/shadow_caster_fsGLSLES glsles
{
	source pbr.frag
	preprocessor_defines SHADOWCASTER,SHADOWCASTER_ALPHA
}

fragment_program PSSM/shadow_caster_fs unified
{
	delegate PSSM/shadow_caster_fsGLSL
	delegate PSSM/shadow_caster_fsGLSLES

	default_params
	{
	    param_named uBaseColorSampler int 0
	}
}

material PSSM/shadow_caster
{
	technique
	{
		pass
		{
            texture_unit BaseColor {}

			vertex_program_ref PSSM/shadow_caster_vs {}

			fragment_program_ref PSSM/shadow_caster_fs {}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PSSM/NoAlpha/shadow_caster_vsGLSL glsl
{
	source pbr.vert
	preprocessor_defines SHADOWCASTER
}

vertex_program PSSM/NoAlpha/shadow_caster_vsGLSLES glsles
{
	source pbr.vert
	preprocessor_defines SHADOWCASTER
}

vertex_program PSSM/NoAlpha/shadow_caster_vs unified
{
	delegate PSSM/NoAlpha/shadow_caster_vsGLSL
	delegate PSSM/NoAlpha/shadow_caster_vsGLSLES

	default_params
	{
		param_named_auto uMVPMatrix worldviewproj_matrix
	}
}

fragment_program PSSM/NoAlpha/shadow_caster_fsGLSL glsl
{
	source pbr.frag
	preprocessor_defines SHADOWCASTER
}

fragment_program PSSM/NoAlpha/shadow_caster_fsGLSLES glsles
{
	source pbr.frag
	preprocessor_defines SHADOWCASTER
}

fragment_program PSSM/NoAlpha/shadow_caster_fs unified
{
	delegate PSSM/NoAlpha/shadow_caster_fsGLSL
	delegate PSSM/NoAlpha/shadow_caster_fsGLSLES
}

material PSSM/NoAlpha/shadow_caster
{
	technique
	{
		pass
		{
			vertex_program_ref PSSM/NoAlpha/shadow_caster_vs {}

			fragment_program_ref PSSM/NoAlpha/shadow_caster_fs {}
		}
	}
}