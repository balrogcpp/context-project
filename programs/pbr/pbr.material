//MIT License
//
//Copyright (c) 2021 Andrew Vasiliev
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
shared_params PBR_Shared_frag
{
    shared_param_named uNormalScale float 1.0
    shared_param_named uOffsetScale float 0.001
}

shared_params PBR_Shared_vert
{
    shared_param_named uFadeRange float 50.0
    shared_param_named uWindRange float 50.0
    shared_param_named uTimeScale float 1.0
}

vertex_program PBR_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_UV,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4
    default_params {
        shared_params_ref PBR_Shared_vert
    }
}

fragment_program PbrBasic_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4
    default_params {
        shared_params_ref PBR_Shared_frag
    }
}

fragment_program PBR_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_ORM,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4
    default_params {
        shared_params_ref PBR_Shared_frag
    }
}

fragment_program PBR_IBL_fs glsl glsles
{
    source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_ORM,USE_IBL,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4
    default_params {
        shared_params_ref PBR_Shared_frag
    }
}

sampler PBRSampler
{
    filtering anisotropic
    max_anisotropy 8
    //tex_address_mode wrap
}


abstract material Basic
{
    transparency_casts_shadows off
    receive_shadows on

    set $Albedo white.dds

    technique
    {
        pass
        {
            specular 1 1 1 1
            diffuse 1 1 1
            ambient 1 1 1
            emissive 1 1 1

            texture_unit Albedo
            {
                texture $Albedo
            }

            vertex_program_ref PBR_vs {}

            fragment_program_ref PbrBasic_fs
            {
                param_named uAlbedoSampler int 0
            }
        }
    }
}

abstract material PBR
{
    transparency_casts_shadows off
    receive_shadows on

    set $Albedo white.dds
    set $Normal normal.dds
    set $ORM white.dds
    set $Emissive black.dds

    technique
    {
        pass
        {
            diffuse 1 1 1
            specular 1 1 1 1
            ambient 1 1 1
            emissive 1 1 1

            texture_unit Albedo
            {
                texture $Albedo
            }
            texture_unit Normal
            {
                texture $Normal
            }
            texture_unit ORM
            {
                texture $ORM
            }
            texture_unit Emissive
            {
                texture $Emissive
            }

            vertex_program_ref PBR_vs {}

            fragment_program_ref PBR_fs
            {
                param_named uAlbedoSampler      int 0
                param_named uNormalSampler      int 1
                param_named uORMSampler         int 2
                param_named uEmissiveSampler    int 3
            }
        }
    }
}

abstract material PBR_IBL : PBR
{
    transparency_casts_shadows off
    receive_shadows on

    set $IBL_Diffuse diffuse.dds
    set $IBL_Specular specular.dds
    set $IBL_LUT brdfLUT.dds

    technique
    {
        pass
        {
            texture_unit IBL_Diffuse
            {
                texture $IBL_Diffuse cubic
                tex_address_mode clamp
                filtering bilinear
            }
            texture_unit IBL_Specular
            {
                texture $IBL_Specular cubic
                tex_address_mode clamp
                filtering bilinear
            }
            texture_unit IBL_LUT
            {
                tex_address_mode clamp
                texture $IBL_LUT
                filtering bilinear
            }

            vertex_program_ref PBR_vs {}

            fragment_program_ref PBR_IBL_fs
            {
                param_named uAlbedoSampler      int 0
                param_named uNormalSampler      int 1
                param_named uMetallicSampler    int 2
                param_named uRoughnessSampler   int 3
                param_named uOcclusionSampler   int 4
                param_named uEmissiveSampler    int 5
                param_named uDiffuseEnvSampler  int 6
                param_named uSpecularEnvSampler int 7
                param_named ubrdfLUT            int 8
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PbrReflective_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_UV,HAS_REFLECTION,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4
}

fragment_program PbrReflective_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_NORMALMAP,HAS_EMISSIVEMAP,HAS_ORM,HAS_REFLECTION,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4

    default_params
    {
        shared_params_ref PBR_Shared_frag
    }
}

abstract material Plane : PBR
{
    receive_shadows on
    transparency_casts_shadows off

    technique
    {
        pass
        {
            texture_unit ReflectionMap
            {
                texture black.dds
                filtering bilinear
            }

            vertex_program_ref PbrReflective_vs {}

            fragment_program_ref PbrReflective_fs
            {
                param_named uAlbedoSampler      int 0
                param_named uNormalSampler      int 1
                param_named uORMSampler         int 2
                param_named uEmissiveSampler    int 3
                param_named uReflectionMap      int 4
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PbrTerrain_vs_gl glsl
{
	source pbr.vert
    preprocessor_defines HAS_UV,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4
    default_params {
        shared_params_ref PBR_Shared_vert
    }
}

vertex_program PbrTerrain_vs_es glsles
{
	source pbr.vert
    preprocessor_defines VERTEX_COMPRESSION,HAS_UV,MAX_LIGHTS=8
    default_params {
        shared_params_ref PBR_Shared_vert
    }
}

vertex_program PbrTerrain_vs unified
{
    delegate PbrTerrain_vs_gl
    delegate PbrTerrain_vs_es
}

fragment_program PbrTerrain_fs_gl glsl
{
	source pbr.frag
    preprocessor_defines TERRAIN,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_PARALLAXMAP,HAS_ORM,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4

    default_params
    {
        shared_params_ref PBR_Shared_frag
        param_named uTerrainTexScale float 50.0
    }
}

fragment_program PbrTerrain_fs_es glsles
{
	source pbr.frag
    preprocessor_defines TERRAIN,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_PARALLAXMAP,HAS_ORM,MAX_LIGHTS=8

    default_params
    {
        shared_params_ref PBR_Shared_frag
        param_named uTerrainTexScale float 50.0
    }
}

fragment_program PbrTerrain_fs unified
{
    delegate PbrTerrain_fs_gl
    delegate PbrTerrain_fs_es
}


abstract material Terrain : PBR
{
    technique
    {
        pass
        {
            texture_unit GlobalNormal
            {
                texture normal.dds
                filtering bilinear
            }

            /*texture_unit GlobalShadow
            {
                texture white.dds
                filtering bilinear
            }*/

            vertex_program_ref PbrTerrain_vs
            {
                param_named_auto uModelMatrix world_matrix
            }

            fragment_program_ref PbrTerrain_fs
            {
                param_named uAlbedoSampler       int 0
                param_named uNormalSampler       int 1
                param_named uORMSampler          int 2
                param_named uEmissiveSampler     int 3
                param_named uGlobalNormalSampler int 4
                //param_named uGlobalShadowSampler int 5
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PbrPaged_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_UV,MAX_LIGHTS=8
    default_params {
        shared_params_ref PBR_Shared_vert
    }
}

fragment_program PbrPaged_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_ALPHA,MAX_LIGHTS=8
}

abstract material Paged : Basic
{
    receive_shadows off
    transparency_casts_shadows on

    set $Albedo white.dds

    technique
    {
        pass
        {
            alpha_rejection greater_equal 127

            texture_unit Albedo
            {
                texture $Albedo
            }

            vertex_program_ref PbrPaged_vs {}

            fragment_program_ref PbrPaged_fs
            {
                param_named uAlbedoSampler int 0
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PbrGrass_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines PAGED_GEOMETRY,HAS_NORMALS,HAS_TANGENTS,HAS_UV,HAS_COLOURS,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4
    default_params {
        shared_params_ref PBR_Shared_vert
    }
}

fragment_program PbrGrass_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines PAGED_GEOMETRY,HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_COLOURS,HAS_ALPHA,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4
}

abstract material Grass : Basic
{
    receive_shadows on
    transparency_casts_shadows off

    set $Albedo white.dds

    technique
    {
        pass
        {
            alpha_rejection greater_equal 128
            cull_hardware none
            //scene_blend alpha_blend

            texture_unit Albedo
            {
                texture $Albedo
                tex_address_mode clamp
            }

            vertex_program_ref PbrGrass_vs {}

            fragment_program_ref PbrGrass_fs
            {
                param_named uAlbedoSampler int 0
            }
        }
    }
}

abstract material Plant : Basic
{
    receive_shadows on
    transparency_casts_shadows on

    set $Albedo white.dds

    technique
    {
        pass
        {
            alpha_rejection greater_equal 128

            texture_unit Albedo
            {
                texture $Albedo
            }

            vertex_program_ref PbrGrass_vs {}

            fragment_program_ref PbrGrass_fs
            {
                param_named uAlbedoSampler int 0
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PbrFx_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines HAS_UV,HAS_COLOURS,MAX_LIGHTS=1
    default_params {
        shared_params_ref PBR_Shared_vert
    }
}

fragment_program PbrFx_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_BASECOLORMAP,HAS_COLOURS,HAS_ALPHA,MAX_LIGHTS=1
}

abstract material PbrFx : Basic
{
    receive_shadows off
    transparency_casts_shadows off

    set $Albedo white.dds

    technique
    {
        pass
        {
            lighting off
            alpha_rejection greater_equal 128
            cull_hardware none
            scene_blend add

            texture_unit Albedo
            {
                texture $Albedo
                filtering bilinear
                tex_address_mode clamp
            }

            vertex_program_ref PbrFx_vs {}

            fragment_program_ref PbrFx_fs
            {
                param_named uAlbedoSampler int 0
            }
        }
    }
}
