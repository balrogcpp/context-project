//MIT License
//
//Copyright (c) 2020 Andrey Vasiliev
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PbrBasic_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,SHADOWRECEIVER
}

fragment_program PbrBasic_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,SHADOWRECEIVER
}

material Basic
{
    transparency_casts_shadows off
    receive_shadows on

    technique
    {
        pass
        {
            specular 1 1 1 1
            diffuse 1 1 1
            ambient 0 0 0
            alpha_rejection greater_equal 127

            texture_unit Albedo {}
            texture_unit Normal {}

            vertex_program_ref PbrBasic_vs {}

            fragment_program_ref PbrBasic_fs
            {
                param_named uBaseColorSampler int 0
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PBR_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,SHADOWRECEIVER
}

fragment_program PBR_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_METALLICMAP,HAS_ROUGHNESSMAP,HAS_OCCLUSIONMAP,HAS_PARALLAXMAP,SHADOWRECEIVER
}

material PBR
{
    transparency_casts_shadows off
    receive_shadows on

    technique
    {
      pass
      {
            diffuse 1 1 1
            specular 1 1 1 1
            ambient 0 0 0
            alpha_rejection greater_equal 127

            texture_unit Albedo
            {
                texture white.dds
            }
            texture_unit Normal
            {
                texture green.dds
            }
            texture_unit Metallic
            {
                texture white.dds
            }
            texture_unit Roughness
            {
                texture white.dds
            }
            texture_unit Emissive
            {
                texture black.dds
            }
            texture_unit AO
            {
                texture white.dds
            }
            texture_unit Offset
            {
                texture black.dds
            }

            vertex_program_ref PBR_vs {}

			fragment_program_ref PBR_fs
			{
                param_named uBaseColorSampler   int 0
                param_named uNormalSampler    int 1
                param_named uMetallicSampler int 2
                param_named uRoughnessSampler int 3
                param_named uEmissiveSampler      int 4
                param_named uOcclusionSampler   int 5
                param_named uOffsetSampler   int 6
			}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment_program PbrIbl_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_METALLICMAP,HAS_ROUGHNESSMAP,HAS_OCCLUSIONMAP,USE_IBL,SHADOWRECEIVER
}

material PbrIbl
{
    transparency_casts_shadows off
    receive_shadows off

    technique
    {
      pass
      {
            diffuse 1 1 1
            specular 1 1 1 1
            ambient 0 0 0
            alpha_rejection greater_equal 127

            texture_unit Albedo {}
            texture_unit Normal {}
            texture_unit Metallic
            {
                texture white.dds
            }
            texture_unit Roughness
            {
                texture white.dds
            }
            texture_unit Emissive
            {
                texture black.dds
            }
            texture_unit AO
            {
                texture white.dds
            }
            texture_unit IBL_Diffuse
            {
                texture diffuse.dds cubic
            }
            texture_unit IBL_Specular
            {
                texture OutputCube.dds cubic
            }
            texture_unit IBL_LUT
            {
                texture brdfLUT.dds
            }

            vertex_program_ref PBR_vs {}

			fragment_program_ref PbrIbl_fs
			{
                param_named uBaseColorSampler   int 0
                param_named uNormalSampler    int 1
                param_named uMetallicSampler int 2
                param_named uRoughnessSampler int 3
                param_named uEmissiveSampler      int 4
                param_named uOcclusionSampler   int 5
                param_named uDiffuseEnvSampler  int 6
                param_named uSpecularEnvSampler int 7
                param_named ubrdfLUT            int 8
			}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PbrReflection_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,REFLECTION,SHADOWRECEIVER
}

fragment_program PbrReflection_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_NORMALMAP,HAS_METALLICMAP,HAS_ROUGHNESSMAP,HAS_PARALLAXMAP,REFLECTION,SHADOWRECEIVER
}

material PbrReflection
{
    technique
    {
      pass
      {
            diffuse 1 1 1
            specular 1 1 1 1
            ambient 0 0 0

            texture_unit Albedo {}
            texture_unit Normal {}
            texture_unit Metallic
            {
                texture white.dds
            }
            texture_unit Roughness
            {
                texture white.dds
            }
            texture_unit Offset
            {
                texture black.dds
            }
            texture_unit ReflectionMap {}
            texture_unit NoiseMap
            {
                texture noise_fresnel.dds
                filtering bilinear
            }

            vertex_program_ref PbrReflection_vs {}

			fragment_program_ref PbrReflection_fs
			{
                param_named uBaseColorSampler   int 0
                param_named uNormalSampler    int 1
                param_named uMetallicSampler int 2
                param_named uRoughnessSampler int 3
                param_named uOffsetSampler int 4
                param_named uReflectionMap int 5
                param_named uNoiseMap int 6
			}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PbrTerrain_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines SHADOWRECEIVER,VERTEX_COMPRESSION
}

fragment_program PbrTerrain_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_METALLICMAP,HAS_ROUGHNESSMAP,HAS_OCCLUSIONMAP,HAS_PARALLAXMAP,SHADOWRECEIVER,TERRAIN
}

material Terrain
{
    technique
    {
      pass
      {
            diffuse 1 1 1
            specular 1 1 1 1
            ambient 0 0 0

            texture_unit Albedo {}
            texture_unit Normal {}
            texture_unit Metallic
            {
                texture white.dds
            }
            texture_unit Roughness
            {
                texture white.dds
            }
            texture_unit Emissive
            {
                texture black.dds
            }
            texture_unit AO
            {
                texture white.dds
            }
            texture_unit Offset
            {
                texture black.dds
            }
            texture_unit GlobalNormal {}
            texture_unit GlobalShadow {}

            vertex_program_ref PbrTerrain_vs {}

			fragment_program_ref PbrTerrain_fs
			{
                param_named uBaseColorSampler   int 0
                param_named uNormalSampler    int 1
                param_named uMetallicSampler int 2
                param_named uRoughnessSampler int 3
                param_named uEmissiveSampler      int 4
                param_named uOcclusionSampler   int 5
                param_named uOffsetSampler   int 6
                param_named uGlobalNormalSampler int 7
			}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program PbrPaged_vs glsl glsles
{
	source pbr.vert
    preprocessor_defines PAGED_GEOMETRY,HAS_NORMALS,HAS_TANGENTS,SHADOWRECEIVER
}

fragment_program PbrPaged_fs glsl glsles
{
	source pbr.frag
    preprocessor_defines PAGED_GEOMETRY,HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,SHADOWRECEIVER
}

material PbrPaged
{
    receive_shadows on
    transparency_casts_shadows on

    technique
    {
      pass
      {
            specular 1 1 1 1
            diffuse 1 1 1
            ambient 0 0 0
            alpha_rejection greater_equal 127

            texture_unit Albedo
            {
                filtering bilinear
            }

			vertex_program_ref PbrPaged_vs {}

			fragment_program_ref PbrPaged_fs
			{
                param_named uBaseColorSampler   int 0
			}
        }
    }
}

material PbrGrass
{
    receive_shadows on
    transparency_casts_shadows on

    technique
    {
      pass
      {
            specular 1 1 1 1
            diffuse 1 1 1
            ambient 0 0 0
            alpha_rejection greater_equal 127
            cull_hardware none
            cull_software none

            texture_unit Albedo
            {
                filtering bilinear
            }

			vertex_program_ref PbrPaged_vs {}

			fragment_program_ref PbrPaged_fs
			{
                param_named uBaseColorSampler int 0
			}
        }
    }
}