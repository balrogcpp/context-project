/*
MIT License

Copyright (c) 2020 Andrey Vasiliev

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

fragment_program PbrIbl_Unity_fs_glsl glsl
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_NORMALMAP,HAS_METALROUGHNESSMAP,USE_IBL
}

fragment_program PbrIbl_Unity_fs_glsles glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_NORMALMAP,HAS_METALROUGHNESSMAP,USE_IBL
}

fragment_program PbrIbl_Unity_fs unified
{
	delegate PbrIbl_Unity_fs_glsl
	delegate PbrIbl_Unity_fs_glsles
}

material PbrIbl/Unity
{
    receive_shadows off

    technique
    {
      pass
      {
            texture_unit Albedo {}
            texture_unit Normal {}
            texture_unit MetallicRougness {}
            texture_unit IBL_Diffuse
            {
                texture diffuse.dds cubic
            }
            texture_unit IBL_Specular
            {
                texture OutputCube.dds cubic
            }
            texture_unit IBL_LUT
            {
                texture brdfLUT.dds
            }

            vertex_program_ref Pbr_vs {}

			fragment_program_ref PbrIbl_Unity_fs
			{
                param_named uBaseColorSampler   int 0
                param_named uNormalSampler    int 1
                param_named uMetallicRoughnessSampler int 2
                param_named uDiffuseEnvSampler  int 3
                param_named uSpecularEnvSampler int 4
                param_named ubrdfLUT            int 5
			}
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment_program PbrExtIbl_Unity_fs_glsl glsl
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_METALROUGHNESSMAP,HAS_OCCLUSIONMAP,USE_IBL
}

fragment_program PbrExtIbl_Unity_fs_glsles glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_METALROUGHNESSMAP,HAS_OCCLUSIONMAP,USE_IBL
}

fragment_program PbrExtIbl_Unity_fs unified
{
	delegate PbrExtIbl_Unity_fs_glsl
	delegate PbrExtIbl_Unity_fs_glsles
}

material PbrExtIbl/Unity
{
    receive_shadows off

    technique
    {
      pass
      {
            texture_unit Albedo {}
            texture_unit Normal {}
            texture_unit MetallicRougness {}
            texture_unit Emissive
            {
                texture black.dds
            }
            texture_unit AmbientOcclusion
            {
                texture white.dds
            }
            texture_unit IBL_Diffuse
            {
                texture diffuse.dds cubic
            }
            texture_unit IBL_Specular
            {
                texture OutputCube.dds cubic
            }
            texture_unit IBL_LUT
            {
                texture brdfLUT.dds
            }

            vertex_program_ref Pbr_vs {}

			fragment_program_ref PbrExtIbl_Unity_fs
			{
                param_named uBaseColorSampler   int 0
                param_named uNormalSampler    int 1
                param_named uMetallicRoughnessSampler int 2
                param_named uEmissiveSampler      int 3
                param_named uOcclusionSampler   int 4
                param_named uDiffuseEnvSampler  int 5
                param_named uSpecularEnvSampler int 6
                param_named ubrdfLUT            int 7
			}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment_program Pbr_Unity_fs_glsl glsl
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_NORMALMAP,HAS_METALROUGHNESSMAP,SHADOWRECEIVER
}

fragment_program Pbr_Unity_fs_glsles glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_NORMALMAP,HAS_METALROUGHNESSMAP,SHADOWRECEIVER
}

fragment_program Pbr_Unity_fs unified
{
	delegate Pbr_Unity_fs_glsl
	delegate Pbr_Unity_fs_glsles
}


material Pbr/Unity
{
    technique
    {
      pass
      {
            texture_unit Albedo {}
            texture_unit Normal {}
            texture_unit MetallicRougness {}

            vertex_program_ref Pbr_vs {}

			fragment_program_ref Pbr_Unity_fs
			{
                param_named uBaseColorSampler   int 0
                param_named uNormalSampler    int 1
                param_named uMetallicRoughnessSampler int 2
			}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment_program PbrExt_Unity_fs_glsl glsl
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_METALROUGHNESSMAP,HAS_OCCLUSIONMAP,SHADOWRECEIVER
}

fragment_program PbrExt_Unity_fs_glsles glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_METALROUGHNESSMAP,HAS_OCCLUSIONMAP,SHADOWRECEIVER
}

fragment_program PbrExt_Unity_fs unified
{
	delegate PbrExt_Unity_fs_glsl
	delegate PbrExt_Unity_fs_glsles
}


material PbrExt/Unity
{
    technique
    {
      pass
      {
            texture_unit Albedo {}
            texture_unit Normal {}
            texture_unit MetallicRougness {}
            texture_unit Emissive {}
            texture_unit AmbientOcclusion {}

            vertex_program_ref Pbr_vs {}

			fragment_program_ref PbrExt_Unity_fs
			{
                param_named uBaseColorSampler   int 0
                param_named uNormalSampler    int 1
                param_named uMetallicRoughnessSampler int 2
                param_named uEmissiveSampler      int 3
                param_named uOcclusionSampler   int 4
			}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment_program PbrReflection_Unity_fs_glsl glsl
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_NORMALMAP,HAS_METALROUGHNESSMAP,REFLECTION,SHADOWRECEIVER
}

fragment_program PbrReflection_Unity_fs_glsles glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_NORMALMAP,HAS_METALROUGHNESSMAP,REFLECTION,SHADOWRECEIVER
}

fragment_program PbrReflection_Unity_fs unified
{
	delegate PbrReflection_Unity_fs_glsl
	delegate PbrReflection_Unity_fs_glsles
}


material PbrReflection/Unity
{
    technique
    {
      pass
      {
            texture_unit Albedo {}
            texture_unit Normal {}
            texture_unit MetallicRougness {}
            texture_unit ReflectionMap {}
            texture_unit NoiseMap
            {
                texture noise_fresnel.dds
                filtering linear linear linear
            }

            vertex_program_ref PbrReflection_vs {}

			fragment_program_ref PbrReflection_Unity_fs
			{
                param_named uBaseColorSampler   int 0
                param_named uNormalSampler    int 1
                param_named uMetallicRoughnessSampler int 2
                param_named uReflectionMap int 3
                param_named uNoiseMap int 4
			}
        }
    }
}