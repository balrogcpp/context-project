//MIT License
//
//Copyright (c) 2020 Andrey Vasiliev
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

compositor GBuffer
{
    technique
    {
        texture mrt target_width_scaled 0.5 target_height_scaled 0.5 PF_FLOAT16_RGB chain_scope

        target mrt
        {
            input none
            shadows off
            material_scheme GBuffer

            pass clear
			{
			    buffers colour depth stencil
				depth_value 1.0
			}

            pass render_scene {}
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------
vertex_program gbuffer_vp glsl glsles
{
	source gbuffer.vert
}

fragment_program gbuffer_fp glsl glsles
{
	source gbuffer.frag
}

material gbuffer
{
    technique
    {
        pass
        {
            vertex_program_ref gbuffer_vp
            {
                param_named_auto uModelMatrix world_matrix
                param_named_auto cWorldViewProj worldviewproj_matrix
                param_named cWorldViewProjPrev matrix4x4 0
            }

            fragment_program_ref gbuffer_fp
            {
                param_named_auto cNearClipDistance near_clip_distance
                param_named_auto cFarClipDistance far_clip_distance
            }
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------
vertex_program gbuffer_alpha_vp glsl glsles
{
 	source gbuffer.vert
 	preprocessor_defines HAS_ALPHA
}

fragment_program gbuffer_alpha_fp glsl glsles
{
	source gbuffer.frag
	preprocessor_defines HAS_ALPHA
}

material gbuffer_alpha
{
    technique
    {
        pass
        {
            texture_unit BaseColor
            {
                filtering bilinear
                tex_address_mode clamp
            }

            vertex_program_ref gbuffer_alpha_vp
            {
                param_named_auto uModelMatrix world_matrix
                param_named_auto cWorldViewProj worldviewproj_matrix
                param_named cWorldViewProjPrev matrix4x4 0
            }

            fragment_program_ref gbuffer_alpha_fp
            {
                param_named_auto cNearClipDistance near_clip_distance
                param_named_auto cFarClipDistance far_clip_distance
                param_named baseColor int 0
            }
        }
    }
}