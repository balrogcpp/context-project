//MIT License
//
//Copyright (c) 2020 Andrey Vasiliev
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

fragment_program filtery_fsGLSL glsl
{
	source filtery.frag
}

fragment_program filtery_fsGLSLES glsles
{
	source filtery.frag
}

fragment_program filtery_fs unified
{
	delegate filtery_fsGLSL
	delegate filtery_fsGLSLES

    default_params
    {
        param_named_auto screenSize viewport_size
        param_named AttenuationSampler int 0
    }
}

material SSAO/filtery
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref filtery_fs {}

			texture_unit
            {
                content_type compositor SSAO ssao
                filtering linear linear none
            }
		}
	}
}
//----------------------------------------------------------------------------------------------------------------------
fragment_program filterx_fsGLSL glsl
{
	source filterx.frag
}

fragment_program filterx_fsGLSLES glsles
{
	source filterx.frag
}

fragment_program filterx_fs unified
{
	delegate filterx_fsGLSL
	delegate filterx_fsGLSLES

    default_params
    {
        param_named_auto screenSize viewport_size
        param_named AttenuationSampler int 0
    }
}

material SSAO/filterx
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref filterx_fs {}

			texture_unit
            {
                content_type compositor SSAO ssao
                filtering linear linear none
            }
		}
	}
}

//----------------------------------------------------------------------------------------------------------------------
material Bloom/filtery
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref filtery_fs {}

			texture_unit
            {
                content_type compositor Bloom bloom
                filtering linear linear none
            }
		}
	}
}
//----------------------------------------------------------------------------------------------------------------------
material Bloom/filterx
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref filterx_fs {}

			texture_unit
            {
                content_type compositor Bloom bloom
                filtering linear linear none
            }
		}
	}
}