/*
MIT License

Copyright (c) 2020 Andrey Vasiliev

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

fragment_program Context/filter5y_fsGLSL glsl
{
	source filter5y.frag
}

fragment_program Context/filter5y_fsGLSLES glsles
{
	source filter5y.frag
}

fragment_program Context/filter5y_fs unified
{
	delegate Context/filter5y_fsGLSL
	delegate Context/filter5y_fsGLSLES

    default_params
    {
        param_named_auto screenSize viewport_size
        param_named AttenuationSampler int 0
    }
}

material Context/filter5Y
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref Context/filter5y_fs {}

			texture_unit
            {
                content_type compositor Context/Bloom bloom
                filtering none
            }
		}
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment_program Context/filter5x_fsGLSL glsl
{
	source filter5x.frag
}

fragment_program Context/filter5x_fsGLSLES glsles
{
	source filter5x.frag
}

fragment_program Context/filter5x_fs unified
{
	delegate Context/filter5x_fsGLSL
	delegate Context/filter5x_fsGLSLES

    default_params
    {
        param_named_auto screenSize viewport_size
        param_named AttenuationSampler int 0
    }
}

material Context/filter5X
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref Context/filter5x_fs {}

			texture_unit
            {
                content_type compositor Context/Bloom bloom
                filtering none
            }
		}
	}
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment_program Context/filter3y_fsGLSL glsl
{
	source filter3y.frag
}

fragment_program Context/filter3y_fsGLSLES glsles
{
	source filter3y.frag
}

fragment_program Context/filter3y_fs unified
{
	delegate Context/filter3y_fsGLSL
	delegate Context/filter3y_fsGLSLES

    default_params
    {
        param_named_auto screenSize viewport_size
        param_named AttenuationSampler int 0
    }
}

material Context/filter3Y
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref Context/filter3y_fs {}

			texture_unit
            {
                content_type compositor Context/Bloom bloom
                filtering none
            }
		}
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment_program Context/filter3x_fsGLSL glsl
{
	source filter3x.frag
}

fragment_program Context/filter3x_fsGLSLES glsles
{
	source filter3x.frag
}

fragment_program Context/filter3x_fs unified
{
	delegate Context/filter3x_fsGLSL
	delegate Context/filter3x_fsGLSLES

    default_params
    {
        param_named_auto screenSize viewport_size
        param_named AttenuationSampler int 0
    }
}

material Context/filter3X
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref Context/filter3x_fs {}

			texture_unit
            {
                content_type compositor Context/Bloom bloom
                filtering none
            }
		}
	}
}