//MIT License
//
//Copyright (c) 2020 Andrey Vasiliev
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

//----------------------------------------------------------------------------------------------------------------------
vertex_program gbuffer_vp_glsl glsl
{
 	source gbuffer.vert
}

vertex_program gbuffer_vp_glsles glsles
{
 	source gbuffer.vert
}

fragment_program gbuffer_fp_glsl glsl
{
	source gbuffer.frag
}


fragment_program gbuffer_fp_glsles glsles
{
	source gbuffer.frag
}

vertex_program gbuffer_vp unified
{
	delegate gbuffer_vp_glsl
    delegate gbuffer_vp_glsles
}

fragment_program gbuffer_fp unified
{
	delegate gbuffer_fp_glsl
	delegate gbuffer_fp_glsles
}

material gbuffer
{
    technique
    {
        pass
        {
            vertex_program_ref gbuffer_vp
            {
                param_named_auto cWorldViewProj worldviewproj_matrix
                param_named_auto cWorldView worldview_matrix
            }

            fragment_program_ref gbuffer_fp
            {
                param_named_auto cNearClipDistance near_clip_distance
                param_named_auto cFarClipDistance far_clip_distance
            }
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------
vertex_program gbuffer_alpha_vp_glsl glsl
{
 	source gbuffer.vert
 	preprocessor_defines ALPHA
}

vertex_program gbuffer_alpha_vp_glsles glsles
{
 	source gbuffer.vert
 	preprocessor_defines ALPHA
}

fragment_program gbuffer_alpha_fp_glsl glsl
{
	source gbuffer.frag
	preprocessor_defines ALPHA
}

fragment_program gbuffer_alpha_fp_glsles glsles
{
	source gbuffer.frag
	preprocessor_defines ALPHA
}

vertex_program gbuffer_alpha_vp unified
{
	delegate gbuffer_alpha_vp_glsl
    delegate gbuffer_alpha_vp_glsles
}

fragment_program gbuffer_alpha_fp unified
{
	delegate gbuffer_alpha_fp_glsl
	delegate gbuffer_alpha_fp_glsles
}

material gbuffer_alpha
{
    technique
    {
        pass
        {
            texture_unit BaseColor {}

            vertex_program_ref gbuffer_alpha_vp
            {
                param_named_auto cWorldViewProj worldviewproj_matrix
                param_named_auto cWorldView worldview_matrix
            }

            fragment_program_ref gbuffer_alpha_fp
            {
                param_named_auto cNearClipDistance near_clip_distance
                param_named_auto cFarClipDistance far_clip_distance
                param_named baseColor int 0
            }
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------
vertex_program gbuffer_disable_vp_glsl glsl
{
 	source gbuffer.vert
}

vertex_program gbuffer_disable_vp_glsles glsles
{
 	source gbuffer.vert
}

fragment_program gbuffer_disable_fp_glsl glsl
{
	source gbuffer.frag
}


fragment_program gbuffer_disable_fp_glsles glsles
{
	source gbuffer.frag
}

vertex_program gbuffer_disable_vp unified
{
	delegate gbuffer_disable_vp_glsl
    delegate gbuffer_disable_vp_glsles

    preprocessor_defines DISABLE
}

fragment_program gbuffer_disable_fp unified
{
	delegate gbuffer_disable_fp_glsl
	delegate gbuffer_disable_fp_glsles

	preprocessor_defines DISABLE
}

material gbuffer_disable
{
    technique
    {
        pass
        {
            vertex_program_ref gbuffer_disable_vp {}

            fragment_program_ref gbuffer_disable_fp {}
        }
    }
}