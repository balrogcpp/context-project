//MIT License
//
//Copyright (c) 2020 Andrey Vasiliev
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

compositor Context/Main
{
    technique
    {
        texture scene target_width target_height PF_FLOAT16_RGB chain_scope

        target scene
        {
            input previous
        }
    }
}

compositor Context/GBuffer
{
    technique
    {
        // GBuffer enconding: --------------------------------------------------
        // mrt0: rgba --> unused in this sample (plain white, (1, 1, 1, 1))
        // mrt1: xyz --> normals, w --> normalized linear depth [0, 1]
        // mrt2: xyz --> position in view space
        //
        // use a better packing of variables in the mrt to (possibly) increase
        // performance!
        // ---------------------------------------------------------------------
        texture mrt target_width target_height PF_FLOAT16_R chain_scope
        //texture mrt target_width target_height PF_FLOAT16_R PF_FLOAT16_GR chain_scope

        target mrt
        {
            input none
            shadows off
            material_scheme GBuffer

            pass clear
			{
			    buffers colour depth stencil
				depth_value 1.0
			}

            pass render_scene {}
        }
    }
}

compositor Context/SSAO
{
    technique
    {
        texture ssao target_width target_height PF_FLOAT16_R chain_scope

        target ssao
        {
            pass render_quad
            {
                material Context/SsaoCrytek
            }
        }
    }
}

compositor Context/Bloom
{
    technique
    {
        texture bloom target_width_scaled 0.15 target_height_scaled 0.15 PF_FLOAT16_RGB chain_scope

        target bloom
        {
            pass render_quad
            {
                material Context/bloom
            }
        }
    }
}

compositor Context/FilterY/SSAO
{
    technique
    {
        texture_ref ssao Context/SSAO ssao

        target ssao
        {
            pass render_quad
            {
                material Context/SSAO/filtery
            }
        }
    }
}

compositor Context/FilterX/SSAO
{
    technique
    {
        texture_ref ssao Context/SSAO ssao

        target ssao
        {
            pass render_quad
            {
                material Context/SSAO/filterx
            }
        }
    }
}

compositor Context/FilterY/Bloom
{
    technique
    {
        texture_ref bloom Context/Bloom bloom

        target bloom
        {
            pass render_quad
            {
                material Context/Bloom/filtery
            }
        }
    }
}

compositor Context/FilterX/Bloom
{
    technique
    {
        texture_ref bloom Context/Bloom bloom

        target bloom
        {
            pass render_quad
            {
                material Context/Bloom/filterx
            }
        }
    }
}

compositor Context/Modulate
{
    technique
    {
        target_output
        {
            pass render_quad
            {
                material Context/Modulate
            }
        }
    }
}

compositor Context/Modulate/SSAO
{
    technique
    {
        target_output
        {
            pass render_quad
            {
                material Context/Modulate/SSAO
            }
        }
    }
}

compositor Context/Modulate/Bloom
{
    technique
    {
        target_output
        {
            pass render_quad
            {
                material Context/Modulate/Bloom
            }
        }
    }
}

compositor Context/Modulate/Bloom/SSAO
{
    technique
    {
        target_output
        {
            pass render_quad
            {
                material Context/Modulate/Bloom/SSAO
            }
        }
    }
}