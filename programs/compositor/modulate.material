//MIT License
//
//Copyright (c) 2020 Andrey Vasiliev
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

fragment_program Modulate_fsGLSL glsl
{
	source modulate.frag
}

fragment_program Modulate_fsGLSLES glsles
{
	source modulate.frag
}

fragment_program Modulate_fs unified
{
	delegate Modulate_fsGLSL
	delegate Modulate_fsGLSLES

	default_params
	{
		param_named SceneSampler int 0
		param_named exposure float 1
	}
}

material Modulate
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref Modulate_fs {}

			texture_unit
            {
                content_type compositor Main scene
                filtering none
            }
		}
	}
}

//----------------------------------------------------------------------------------------------------------------------
fragment_program Modulate_Bloom_fsGLSL glsl
{
	source modulate.frag
	preprocessor_defines BLOOM
}

fragment_program Modulate_Bloom_fsGLSLES glsles
{
	source modulate.frag
	preprocessor_defines BLOOM
}

fragment_program Modulate_Bloom_fs unified
{
	delegate Modulate_Bloom_fsGLSL
	delegate Modulate_Bloom_fsGLSLES

	default_params
	{
		param_named SceneSampler int 0
		param_named BloomSampler int 1
		param_named exposure float 1
	}
}

material Modulate/Bloom
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref Modulate_Bloom_fs {}

			texture_unit
            {
                content_type compositor Main scene
                filtering none
            }

			texture_unit
            {
                content_type compositor Bloom bloom
                filtering none
            }
		}
	}
}

//----------------------------------------------------------------------------------------------------------------------
fragment_program Modulate_SSAO_fsGLSL glsl
{
	source modulate.frag
	preprocessor_defines SSAO
}

fragment_program Modulate_SSAO_fsGLSLES glsles
{
	source modulate.frag
	preprocessor_defines SSAO
}

fragment_program Modulate_SSAO_fs unified
{
	delegate Modulate_SSAO_fsGLSL
	delegate Modulate_SSAO_fsGLSLES

	default_params
	{
		param_named SceneSampler int 0
		param_named SsaoSampler int 1
		param_named exposure float 1
	}
}

material Modulate/SSAO
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref Modulate_SSAO_fs {}

			texture_unit
            {
                content_type compositor Main scene
                filtering none
            }

			texture_unit
            {
                content_type compositor SSAO ssao
                filtering none
            }
		}
	}
}

//----------------------------------------------------------------------------------------------------------------------
fragment_program Modulate_BLOOM_SSAO_fsGLSL glsl
{
	source modulate.frag
	preprocessor_defines BLOOM,SSAO
}

fragment_program Modulate_BLOOM_SSAO_fsGLSLES glsles
{
	source modulate.frag
	preprocessor_defines BLOOM,SSAO
}

fragment_program Modulate_BLOOM_SSAO_fs unified
{
	delegate Modulate_BLOOM_SSAO_fsGLSL
	delegate Modulate_BLOOM_SSAO_fsGLSLES

	default_params
	{
		param_named SceneSampler int 0
		param_named BloomSampler int 1
		param_named SsaoSampler int 2
		param_named exposure float 1
	}
}

material Modulate/Bloom/SSAO
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref Modulate_BLOOM_SSAO_fs {}

			texture_unit
            {
                content_type compositor Main scene
                filtering linear linear none
            }

			texture_unit
            {
                content_type compositor Bloom bloom
                filtering linear linear none
            }

			texture_unit
            {
                content_type compositor SSAO ssao
                filtering linear linear none
            }
		}
	}
}