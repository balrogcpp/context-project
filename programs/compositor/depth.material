/*
MIT License

Copyright (c) 2020 Andrey Vasiliev

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

vertex_program depth_alpha_vp_glsl glsl
{
 	source depth.vert
 	preprocessor_defines HAS_ALPHA
}

vertex_program depth_alpha_vp_glsles glsles
{
 	source depth.vert
 	preprocessor_defines HAS_ALPHA
}

fragment_program depth_alpha_fp_glsl glsl
{
	source depth.frag
	preprocessor_defines HAS_ALPHA
}

fragment_program depth_alpha_fp_glsles glsles
{
	source depth.frag
	preprocessor_defines HAS_ALPHA
}

vertex_program depth_alpha_vp unified
{
	delegate depth_alpha_vp_glsl
    delegate depth_alpha_vp_glsles

    default_params
    {
        param_named_auto cWorldViewProj worldviewproj_matrix
        param_named_auto cWorldView worldview_matrix
    }
}

fragment_program depth_alpha_fp unified
{
	delegate depth_alpha_fp_glsl
	delegate depth_alpha_vp_glsles

    default_params
    {
        param_named_auto cNearClipDistance near_clip_distance
        param_named_auto cFarClipDistance far_clip_distance
        param_named baseColor int 0
    }
}

material Context/depth_alpha
{
    technique
    {
        pass
        {
            texture_unit BaseColor {}

            vertex_program_ref depth_alpha_vp {}

            fragment_program_ref depth_alpha_fp {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex_program depth_vp_glsl glsl
{
 	source depth.vert
}

vertex_program depth_vp_glsles glsles
{
 	source depth.vert
}

fragment_program depth_fp_glsl glsl
{
	source depth.frag
}


fragment_program depth_fp_glsles glsles
{
	source depth.frag
}

vertex_program depth_vp unified
{
	delegate depth_vp_glsl
    delegate depth_vp_glsles

    default_params
    {
        param_named_auto cWorldViewProj worldviewproj_matrix
        param_named_auto cWorldView worldview_matrix
    }
}

fragment_program depth_fp unified
{
	delegate depth_fp_glsl
	delegate depth_fp_glsles

    default_params
    {
        param_named_auto cNearClipDistance near_clip_distance
        param_named_auto cFarClipDistance far_clip_distance
    }
}

material Context/depth
{
    technique
    {
        pass
        {
            vertex_program_ref depth_vp {}

            fragment_program_ref depth_fp {}
        }
    }
}