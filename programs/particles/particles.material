//MIT License
//
//Copyright (c) 2020 Andrey Vasiliev
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

fragment_program droplet_fs_glsl glsl
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP
}

fragment_program droplet_fs_glsles glsles
{
	source pbr.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP
}

fragment_program droplet_fs unified
{
	delegate droplet_fs_glsl
	delegate droplet_fs_glsles
}

material Examples/Droplet
{
    receive_shadows off

    technique
    {
      pass
      {
            alpha_rejection greater_equal 128
            emissive 0.3 0.3 0.3
			scene_blend colour_blend
			//depth_write off
			//diffuse vertexcolour

            texture_unit Albedo
            {
                texture basic_droplet.dds
                filtering none
            }

            vertex_program_ref Pbr_vs {}

			fragment_program_ref droplet_fs
			{
                param_named uBaseColorSampler int 0
			}
        }
    }
}