// created by Andrey Vasiliev

// https://drdesten.github.io/web/tools/vogel_disk/
vec2 vogel_disk_1[1] = vec2[](
    vec2(0, 0)
);

vec2 vogel_disk_2[2] = vec2[](
    vec2(0.5692900901879276, -0.2924958774201527),
    vec2(-0.5692900901879276, 0.2924958774201527)
);

vec2 vogel_disk_3[3] = vec2[](
    vec2(0.41936223743220985, 0.14391060533125274),
    vec2(-0.5102845869567497, 0.6215543730292727),
    vec2(0.09092234952453991, -0.7654649783605254)
);

vec2 vogel_disk_4[4] = vec2[](
    vec2(0.21848650099008202, -0.09211370200809937),
    vec2(-0.5866112654782878, 0.32153793477769893),
    vec2(-0.06595078555407359, -0.879656059066481),
    vec2(0.43407555004227927, 0.6502318262968816)
);

vec2 vogel_disk_6[6] = vec2[](
    vec2(0.22264614925077147, 0.06064698166701369),
    vec2(-0.4347134243832013, 0.39839212879777564),
    vec2(-0.009595922700891497, -0.5823786602069174),
    vec2(0.3986738706873504, 0.666769567395017),
    vec2(-0.9188158790763176, -0.09019901224219073),
    vec2(0.7418052062222886, -0.4532310054106982)
);

vec2 vogel_disk_8[8] = vec2[](
    vec2(0.2921473492144121, 0.03798942536906266),
    vec2(-0.27714274097351554, 0.3304853027892154),
    vec2(0.09101981507673855, -0.5188871157785563),
    vec2(0.44459182774878003, 0.5629069824170247),
    vec2(-0.6963877647721594, -0.09264703741542105),
    vec2(0.7417522811565185, -0.4070419658858473),
    vec2(-0.191856808948964, 0.9084732299066597),
    vec2(-0.40412395850181015, -0.8212788214021378)
);

vec2 vogel_disk_12[12] = vec2[](
    vec2(0.1722689015274074, -0.03890781798837625),
    vec2(-0.2925545106670724, 0.19991406586063373),
    vec2(0.008048957573572442, -0.4935956098342653),
    vec2(0.29673929703202895, 0.3896855726102194),
    vec2(-0.6348666391696282, -0.14557204319639935),
    vec2(0.5393697912263803, -0.40227442735351937),
    vec2(-0.2229188387677916, 0.6718392321695309),
    vec2(-0.39623424062096485, -0.7404974035768233),
    vec2(0.7587014288733177, 0.24980221089178709),
    vec2(-0.8542977299379194, 0.3005844845825336),
    vec2(0.36461638085186754, -0.8861446508288848),
    vec2(0.26112720207880213, 0.8951663866635635)
);

vec2 vogel_disk_16[16] = vec2[](
    vec2(0.18993645671348536, 0.027087114076591513),
    vec2(-0.21261242652069953, 0.23391293246949066),
    vec2(0.04771781344140756, -0.3666840644525993),
    vec2(0.297730981239584, 0.398259878229082),
    vec2(-0.509063425827436, -0.06528681462854097),
    vec2(0.507855152944665, -0.2875976005206389),
    vec2(-0.15230616564632418, 0.6426121151781916),
    vec2(-0.30240170651828074, -0.5805072900736001),
    vec2(0.6978019230005561, 0.2771173334141519),
    vec2(-0.6990963248129052, 0.3210960724922725),
    vec2(0.3565142601623699, -0.7066415061851589),
    vec2(0.266890002328106, 0.8360191043249159),
    vec2(-0.7515861305520581, -0.41609876195815027),
    vec2(0.9102937449894895, -0.17014527555321657),
    vec2(-0.5343471434373126, 0.8058593459499529),
    vec2(-0.1133270115046468, -0.9490025827627441)
);

const vec2 vogel_disk_32[32] = vec2[](
    vec2(0.12064426510477419, 0.01555443141176569),
    vec2(-0.16400077998918963, 0.16180237012184204),
    vec2(0.020080498035937415, -0.2628838391620438),
    vec2(0.19686650437195816, 0.27801320993574674),
    vec2(-0.37362329188851157, -0.04976379998047616),
    vec2(0.34544673107582735, -0.20696126421568928),
    vec2(-0.12135781397691386, 0.4507963336805642),
    vec2(-0.22749138875333694, -0.41407969197383454),
    vec2(0.4797593802468298, 0.19235249500691445),
    vec2(-0.5079968434096749, 0.22345015963708734),
    vec2(0.23843255951864029, -0.5032700515259672),
    vec2(0.17505863904522073, 0.587555727235086),
    vec2(-0.5451127409909945, -0.29782530685850084),
    vec2(0.6300137885218894, -0.12390992876509888),
    vec2(-0.391501580064061, 0.5662295575692019),
    vec2(-0.09379538975841809, -0.6746452122696498),
    vec2(0.5447160222309757, 0.47831268960533435),
    vec2(-0.7432342062047558, 0.046109375942755174),
    vec2(0.5345993903170301, -0.520777903066999),
    vec2(-0.0404139208253129, 0.7953459466435174),
    vec2(-0.517173266802963, -0.5989723613060595),
    vec2(0.8080038585189984, 0.12485626574164434),
    vec2(-0.6926663754026566, 0.4944630470831171),
    vec2(0.183730322451809, -0.8205069509230769),
    vec2(0.43067753069940745, 0.7747454863024757),
    vec2(-0.8548041452377114, -0.25576180722119723),
    vec2(0.8217466662308877, -0.3661258311820314),
    vec2(-0.36224393661662146, 0.87070999332353),
    vec2(-0.32376306917956177, -0.8724793262829371),
    vec2(0.8455529005007657, 0.46224259051084376),
    vec2(-0.9483903811252437, 0.2643989345002705),
    vec2(0.5322400733549763, -0.818975339518135)
);

const vec2 vogel_disk_64[64] = vec2[](
    vec2(0.07966914016126773, -0.0005732549414365655),
    vec2(-0.12160530145582471, 0.10283965425501301),
    vec2(0.008559818525228833, -0.197458844206032),
    vec2(0.13356640242431705, 0.18501312713480866),
    vec2(-0.269830801109193, -0.04676021929400281),
    vec2(0.23862848827685754, -0.15791561224005177),
    vec2(-0.09145217101863704, 0.3071892456093635),
    vec2(-0.16649994145461533, -0.30437045701653237),
    vec2(0.33360187330480306, 0.12444185472734362),
    vec2(-0.3648472506019276, 0.14643122426640393),
    vec2(0.16295804188571, -0.36743756507231173),
    vec2(0.11814591296857804, 0.40389274018272564),
    vec2(-0.39109215347150406, -0.22216619295880746),
    vec2(0.43984778429926974, -0.0991894497563406),
    vec2(-0.2824726599141313, 0.38881286099524415),
    vec2(-0.07196259394779835, -0.48861810336110434),
    vec2(0.3795331553348995, 0.3266462474773111),
    vec2(-0.5311851850227693, 0.021032353535204915),
    vec2(0.3723796163057802, -0.3798174856209827),
    vec2(-0.03421619527550065, 0.5508226133906681),
    vec2(-0.37133596181036055, -0.43510931729303065),
    vec2(0.5657057697780938, 0.07671481330934922),
    vec2(-0.49542832895271105, 0.3380662747684381),
    vec2(0.12427771910967947, -0.5917579278786026),
    vec2(0.2988957646566429, 0.536255888187953),
    vec2(-0.6100770454895419, -0.19242280712483223),
    vec2(0.5754234023037136, -0.27046195686657265),
    vec2(-0.2617843818309086, 0.6041130418557645),
    vec2(-0.2345742995202231, -0.6285079469299325),
    vec2(0.59225695199046, 0.315282971433257),
    vec2(-0.6762525075113398, 0.17538638065344198),
    vec2(0.37071132728294354, -0.5906749150680255),
    vec2(0.1119798859418661, 0.7017402283731283),
    vec2(-0.5807270152810202, -0.4435682524557845),
    vec2(0.7229827225912143, -0.06119326417718071),
    vec2(-0.5144794788954391, 0.5461387788248903),
    vec2(-0.005035179534685496, -0.7557546423829214),
    vec2(0.5055857377426614, 0.5663728829872585),
    vec2(-0.7810140733390272, -0.07214936952359105),
    vec2(0.6170681003447506, -0.47552351060683423),
    vec2(-0.15109977600025168, 0.7820762666899624),
    vec2(-0.43760314844428994, -0.6821127366950525),
    vec2(0.7772009255491943, 0.21481487028437787),
    vec2(-0.742204728724318, 0.3758394044302885),
    vec2(0.28114246867378123, -0.7824253564882913),
    vec2(0.3091922614465049, 0.7803683548608),
    vec2(-0.7789831306606205, -0.36561570268862775),
    vec2(0.8145440939773348, -0.2543941296975529),
    vec2(-0.4488757377357506, 0.7504758305912105),
    vec2(-0.1933624476019976, -0.8604246222601459),
    vec2(0.7154581485450054, 0.513848417434855),
    vec2(-0.8988765686147268, 0.11036534262592021),
    vec2(0.5783350546530844, -0.6902686901177914),
    vec2(0.024600692161986272, 0.9131155784626814),
    vec2(-0.6564461645240189, -0.657849672537283),
    vec2(0.9212949234450745, 0.04697899281368057),
    vec2(-0.7330423210662792, 0.5978985715758123),
    vec2(0.12225611512756368, -0.9393399804201348),
    vec2(0.5334856827883492, 0.7868760176859763),
    vec2(-0.948368229388031, -0.21678429915641398),
    vec2(0.8372175428305082, -0.4798472000523386),
    vec2(-0.31121110469716806, 0.9318623471900049),
    vec2(-0.41881630178513873, -0.899674402337137),
    vec2(0.9082566602526256, 0.38845471061254216)
);

float InterleavedGradientNoise(const vec2 uv)
{
    const vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);
    return fract(magic.z * fract(dot(uv, magic.xy)));
}

mat2 getRandomRotationMatrix(const vec2 fragCoord) {
    // rotate the poisson disk randomly
    float randomAngle = InterleavedGradientNoise(fragCoord) * (2.0 * PI);
    vec2 randomBase = vec2(cos(randomAngle), sin(randomAngle));
    mat2 R = mat2(randomBase.x, randomBase.y, -randomBase.y, randomBase.x);
    return R;
}

#ifdef TERRA_LIGHTMAP
float FetchTerraShadow(const vec2 uv)
{
    float shadow = 0.0;
    mat2 R = getRandomRotationMatrix(gl_FragCoord.xy);

    for (int i = 0; i < 4; ++i) {
        vec2 offset = R * (vogel_disk_4[i] * 2.0);
        shadow += textureLod(TerraLightTex, uv + offset, 0.0).x;
    }
    shadow *= 0.25;

    return shadow;
}
#endif


#if MAX_SHADOW_TEXTURES > 0

#define PSSM_FILTER_SIZE 4
#define PSSM_FILTER_RADIUS 2.0

float CalcShadow(const highp vec3 lightSpacePos, int index)
{
    vec2 uv = lightSpacePos.xy;
    float depth = lightSpacePos.z;

    depth = depth * 0.5 + 0.5;
    float shadow = 0.0;
    mat2 R = getRandomRotationMatrix(gl_FragCoord.xy);

    #define PSSM_ESM_K 13.0
    #define PSSM_ESM_MIN -0.2
    for (int i = 0; i < PSSM_FILTER_SIZE; ++i) {
        vec2 offset = R * (vogel_disk_4[i] * PSSM_FILTER_RADIUS);

        float texDepth = 0.0;
        if (index == 0)
            texDepth = textureLod(ShadowTex0, uv + offset * TexelSize6, 0.0).x;
        else if (index == 1)
            texDepth = textureLod(ShadowTex1, uv + offset * TexelSize7, 0.0).x;
        else if (index == 2)
            texDepth = textureLod(ShadowTex2, uv + offset * TexelSize8, 0.0).x;
        else if (index == 3)
            texDepth = textureLod(ShadowTex3, uv + offset * TexelSize9, 0.0).x;

        texDepth = texDepth * (PSSM_GLOBAL_RANGE - PSSM_GLOBAL_MIN_DEPTH) + PSSM_GLOBAL_MIN_DEPTH;
        float sampled = saturate(exp(max(PSSM_ESM_MIN, PSSM_ESM_K * (texDepth - depth))));
        sampled = (1.0 - (4.0 * (1.0 - sampled)));
        shadow += sampled;
    }

    shadow /= float(PSSM_FILTER_SIZE);

    return shadow;
}

#endif // MAX_SHADOW_TEXTURES > 0
