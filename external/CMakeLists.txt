# cmake min version
cmake_minimum_required(VERSION 3.18.0)
project(External)

# externalproject_add and c++ flags
include(ExternalProject)
include(Platform)
include(CppFlags)

# externalproject_add require git
find_package(Git REQUIRED)


# cached variables
string(TOLOWER ${TOOLCHAIN_FULL} TOOLCHAIN_FULL_LOWER)
string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_LOWER)
set(DEPS_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/sdk/${TOOLCHAIN_FULL_LOWER}-${CMAKE_BUILD_TYPE_LOWER} CACHE PATH "")
set(BUILD_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/build/${TOOLCHAIN_FULL_LOWER}-${CMAKE_BUILD_TYPE_LOWER}/src)
set(DEPS_PREFIX_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/build/${TOOLCHAIN_FULL_LOWER}-${CMAKE_BUILD_TYPE_LOWER})
set(DEPS_SOURCE_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/download)
set(DEPS_PATCH_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/patch)
set(DEPS_INCLUDE_DIR ${DEPS_ROOT}/include CACHE PATH "")
set(DEPS_LIB_DIR ${DEPS_ROOT}/lib CACHE PATH "")
set(DEPS_BIN_DIR ${DEPS_ROOT}/bin CACHE PATH "")
if ((CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU") AND NOT MSVC)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s")
endif ()


macro(create_target_patch TARGET REPO TAG PATCH)
    set(PATCH_PATH ${DEPS_PATCH_LOCATION}/${PATCH})
    if (NOT EXISTS ${PATCH_PATH})
        message(FATAL_ERROR "Patch file ${PATCH} not found")
    endif ()

    execute_process(COMMAND ${GIT_EXECUTABLE} tag WORKING_DIRECTORY ${DEPS_SOURCE_LOCATION}/${TARGET} OUTPUT_VARIABLE head_rev)
    string(STRIP "${head_rev}" head_rev)
    file(GLOB RESULT ${DEPS_SOURCE_LOCATION}/${TARGET})
    list(LENGTH RESULT RES_LEN)
    if(NOT RES_LEN EQUAL 0)
        if ("${head_rev}" MATCHES ${TAG})
            set(DOWNLOAD_PLACEHOLDER ${CMAKE_COMMAND} -E true)
            execute_process(COMMAND ${GIT_EXECUTABLE} reset --hard WORKING_DIRECTORY ${DEPS_SOURCE_LOCATION}/${TARGET})
            execute_process(COMMAND ${GIT_EXECUTABLE} apply --ignore-space-change --unidiff-zero ${DEPS_PATCH_LOCATION}/${PATCH} WORKING_DIRECTORY ${DEPS_SOURCE_LOCATION}/${TARGET})
        else ()
            file(REMOVE_RECURSE ${DEPS_SOURCE_LOCATION}/${TARGET})
            set(DOWNLOAD_PLACEHOLDER ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION} ${GIT_EXECUTABLE} clone -q --recursive --shallow-submodules --depth 1 -b ${TAG} ${REPO} ${TARGET})
        endif ()
    else ()
        set(DOWNLOAD_PLACEHOLDER ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION} ${GIT_EXECUTABLE} clone -q --recursive --shallow-submodules --depth 1 -b ${TAG} ${REPO} ${TARGET})
    endif ()

    execute_process(COMMAND ${GIT_EXECUTABLE} apply --check --ignore-space-change --unidiff-zero ${PATCH_PATH} WORKING_DIRECTORY ${DEPS_SOURCE_LOCATION}/${TARGET} RESULT_VARIABLE checkout_err ERROR_VARIABLE err_str)
    if (NOT checkout_err OR NOT EXISTS ${DEPS_SOURCE_LOCATION}/${TARGET}/.git)
        set(PATCH_PLACEHOLDER ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/${TARGET} ${GIT_EXECUTABLE} apply --ignore-space-change --unidiff-zero ${DEPS_PATCH_LOCATION}/${PATCH})
    else ()
        set(PATCH_PLACEHOLDER ${CMAKE_COMMAND} -E true)
    endif ()
endmacro()

macro(create_target TARGET REPO TAG)
    execute_process(COMMAND ${GIT_EXECUTABLE} tag WORKING_DIRECTORY ${DEPS_SOURCE_LOCATION}/${TARGET} OUTPUT_VARIABLE head_rev)
    string(STRIP "${head_rev}" head_rev)
    file(GLOB RESULT ${DEPS_SOURCE_LOCATION}/${TARGET})
    list(LENGTH RESULT RES_LEN)
    if(NOT RES_LEN EQUAL 0)
        if ("${head_rev}" MATCHES ${TAG})
            set(DOWNLOAD_PLACEHOLDER ${CMAKE_COMMAND} -E true)
        else ()
            file(REMOVE_RECURSE ${DEPS_SOURCE_LOCATION}/${TARGET})
            set(DOWNLOAD_PLACEHOLDER ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION} ${GIT_EXECUTABLE} clone -q --recursive --shallow-submodules --depth 1 -b ${TAG} ${REPO} ${TARGET})
        endif ()
    else ()
        set(DOWNLOAD_PLACEHOLDER ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION} ${GIT_EXECUTABLE} clone -q --recursive --shallow-submodules --depth 1 -b ${TAG} ${REPO} ${TARGET})
    endif ()

    set(PATCH_PLACEHOLDER ${CMAKE_COMMAND} -E true)
endmacro()

# macro(check_stamp_patch TARGET PATCH)
#     set(PATCH_PATH ${DEPS_PATCH_LOCATION}/${PATCH})

#     if (NOT EXISTS ${PATCH_PATH})
#         message(FATAL_ERROR "Patch file ${PATCH} not found")
#     endif ()

#     if (EXISTS ${DEPS_SOURCE_LOCATION}/${TARGET}/.git)
#         set(DOWNLOAD_PLACEHOLDER ${CMAKE_COMMAND} -E true)
#     else ()
#         unset(DOWNLOAD_PLACEHOLDER)
#     endif ()

#     execute_process(COMMAND ${GIT_EXECUTABLE} apply --check --ignore-space-change --unidiff-zero ${PATCH_PATH} WORKING_DIRECTORY ${DEPS_SOURCE_LOCATION}/${TARGET} RESULT_VARIABLE checkout_err ERROR_VARIABLE err_str)
#     if (NOT checkout_err OR NOT EXISTS ${DEPS_SOURCE_LOCATION}/${TARGET}/.git)
#         set(PATCH_PLACEHOLDER ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/${TARGET} ${GIT_EXECUTABLE} apply --ignore-space-change --unidiff-zero ${DEPS_PATCH_LOCATION}/${PATCH})
#     else ()
#         set(PATCH_PLACEHOLDER ${CMAKE_COMMAND} -E true)
#     endif ()
# endmacro()


# list of third-party targets
create_target_patch(Target_SDL2 https://github.com/libsdl-org/SDL.git release-2.30.8 sdl2-2.30.7.patch)
externalproject_add(Target_SDL2
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_SDL2
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DSDL_SHARED_ENABLED_BY_DEFAULT=OFF
        -DSDL_TEST=OFF
        -DSDL_WERROR=OFF
        -DLIBC=ON
        -DSDL_LIBC=ON
        -DSDL_DIRECTX=ON
        -DRENDER_METAL=OFF
        -DSDL_RENDER_METAL=OFF
        -DSDL_METAL=OFF
        -DSDL_VULKAN=ON
        -DHIDAPI=OFF
        -DSDL_HIDAPI=OFF
        -DSDL_HIDAPI_JOYSTICK=OFF
)


create_target(Target_OIS https://github.com/wgois/OIS.git v1.5.1)
externalproject_add(Target_OIS
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OIS
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DOIS_BUILD_SHARED_LIBS=OFF
        -DOIS_BUILD_DEMOS=OFF
)


create_target(Target_Bullet https://github.com/bulletphysics/bullet3.git 3.25)
externalproject_add(Target_Bullet
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Bullet
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DCMAKE_RELWITHDEBINFO_POSTFIX=
        -DCMAKE_DEBUG_POSTFIX=
        -DCMAKE_RELEASE_POSTFIX=
        -DCMAKE_MINSIZEREL_POSTFIX=
        -DCLAMP_VELOCITIES=0
        -DBULLET2_MULTITHREADING=ON
        -DBUILD_BULLET2_DEMOS=OFF
        -DBUILD_OPENGL3_DEMOS=OFF
        -DBUILD_CPU_DEMOS=OFF
        -DBUILD_EXTRAS=OFF
        -DBUILD_ENET=OFF
        -DBUILD_CLSOCKET=OFF
        -DUSE_GRAPHICAL_BENCHMARK=OFF
        -DBUILD_UNIT_TESTS=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DUSE_SOFT_BODY_MULTI_BODY_DYNAMICS_WORLD=OFF
        -DINSTALL_LIBS=ON
        -DUSE_MSVC_SSE2=ON
        -DUSE_MSVC_AVX=ON
        -DUSE_MSVC_FAST_FLOATINGPOINT=ON
        -DINTERNAL_CREATE_MSVC_RELATIVE_PATH_PROJECTFILES=OFF
)


create_target_patch(Target_OpenAL https://github.com/kcat/openal-soft.git 1.23.1 openal-1.23.1.patch)
externalproject_add(Target_OpenAL
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OpenAL
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DCMAKE_SHARED_LINKER_FLAGS=${CMAKE_SHARED_LINKER_FLAGS}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DALSOFT_TESTS=OFF
        -DALSOFT_UTILS=OFF
        -DALSOFT_EXAMPLES=OFF
        -DALSOFT_CONFIG=OFF
        -DALSOFT_INSTALL_CONFIG=OFF
        -DALSOFT_EAX=OFF
        -DALSOFT_BACKEND_SDL2=OFF
        -DALSOFT_BACKEND_SNDIO=OFF
        -DALSOFT_BACKEND_WASAPI=OFF
        -DALSOFT_BACKEND_WINMM=OFF
        -DALSOFT_BACKEND_WAVE=OFF
        -DALSOFT_BACKEND_OSS=OFF
        -DALSOFT_BACKEND_JACK=OFF
        -DLIBTYPE=SHARED
        -DALSOFT_OSX_FRAMEWORK=OFF
)


create_target_patch(Target_Ogg https://github.com/xiph/ogg.git v1.3.5 ogg-1.3.5.patch)
externalproject_add(Target_Ogg
        EXCLUDE_FROM_ALL true
        DEPENDS Target_OpenAL
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Ogg
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DINSTALL_DOCS=OFF
        -DINSTALL_PKG_CONFIG_MODULE=OFF
        -DINSTALL_CMAKE_PACKAGE_MODULE=ON
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_FRAMEWORK=OFF
        -DBUILD_TESTING=OFF
)


create_target_patch(Target_Vorbis https://github.com/xiph/vorbis.git v1.3.7 vorbis-1.3.7.patch)
externalproject_add(Target_Vorbis
        EXCLUDE_FROM_ALL true
        DEPENDS Target_Ogg
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Vorbis
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DOGG_INCLUDE_DIR=${DEPS_ROOT}/include
        -DOGG_LIBRARY=${DEPS_ROOT}/lib/libogg.a
        -DBUILD_SHARED_LIBS=OFF
)


externalproject_add(Target_Theora
        EXCLUDE_FROM_ALL true
        DEPENDS Target_Ogg
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Theora
        GIT_REPOSITORY https://github.com/xiph/theora.git
        GIT_TAG 7180717276af1ebc7da15c83162d6c5d6203aabf
        GIT_SHALLOW false
        PATCH_COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DEPS_PATCH_LOCATION}/theora.cmake ${DEPS_SOURCE_LOCATION}/Target_Theora/CMakeLists.txt
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DEPS_PATCH_LOCATION}/FindOgg.cmake ${DEPS_SOURCE_LOCATION}/Target_Theora/cmake/FindOgg.cmake
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DOGG_INCLUDE_DIR=${DEPS_ROOT}/include
        -DOGG_LIBRARY=${DEPS_ROOT}/lib/libogg.a
)


create_target(Target_FreeType https://github.com/freetype/freetype.git VER-2-13-2)
externalproject_add(Target_FreeType
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_FreeType
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DCMAKE_DISABLE_FIND_PACKAGE_ZLIB=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_BZip2=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_PNG=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_HarfBuzz=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_BrotliDec=ON
        -DFT_DISABLE_ZLIB=ON
        -DFT_DISABLE_BZIP2=ON
        -DFT_DISABLE_PNG=ON
        -DFT_DISABLE_HARFBUZZ=ON
        -DFT_DISABLE_BROTLI=ON
        -DFT_ENABLE_ERROR_STRINGS=OFF
        -DBUILD_SHARED_LIBS=OFF
)


create_target(Target_zlib https://github.com/madler/zlib.git v1.3.1)
externalproject_add(Target_zlib
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_zlib
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DBUILD_SHARED_LIBS=OFF
        -DZLIB_BUILD_EXAMPLES=OFF
        -DCMAKE_DEBUG_POSTFIX=
        -DAMD64=OFF
        -DASM686=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CMAKE_COMMAND} -E chdir ${DEPS_ROOT} ${CMAKE_COMMAND} -E rm -rf
        lib/libz.so lib/libzlib.dll.a lib/zlib.lib lib/zlibd.lib bin/libzlib.dll bin/zlib.dll bin/zlibd.dll lib/libz.dylib
)


create_target(Target_ZZIP https://github.com/gdraheim/zziplib.git v0.13.74)
externalproject_add(Target_ZZIP
        EXCLUDE_FROM_ALL true
        DEPENDS Target_zlib
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_ZZIP
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_STATIC_LIBS=ON
        -DMSVC_STATIC_RUNTIME=OFF
        -DZZIPMMAPPED=OFF
        -DZZIPFSEEKO=OFF
        -DZZIPWRAP=OFF
        -DZZIPSDL=OFF
        -DZZIPDOCS=OFF
        -DZZIPTEST=OFF
        -DZZIPBINS=OFF
)


create_target_patch(Target_assimp https://github.com/assimp/assimp.git v5.4.3 assimp-5.4.3.patch)
externalproject_add(Target_assimp
        EXCLUDE_FROM_ALL true
        DEPENDS Target_zlib
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_assimp
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DASSIMP_HUNTER_ENABLED=OFF
        -DASSIMP_BUILD_ZLIB=OFF
        -DASSIMP_BUILD_MINIZIP=OFF
        -DASSIMP_WARNINGS_AS_ERRORS=OFF
        -DASSIMP_BUILD_SAMPLES=OFF
        -DASSIMP_INSTALL_PDB=OFF
        -DINJECT_DEBUG_POSTFIX=OFF
        -DASSIMP_INJECT_DEBUG_POSTFIX=OFF
        -DASSIMP_IGNORE_GIT_HASH=ON
        -DASSIMP_BUILD_TESTS=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
        -DASSIMP_NO_EXPORT=ON
        -DASSIMP_BUILD_AMF_IMPORTER=OFF
        -DASSIMP_BUILD_3DS_IMPORTER=OFF
        -DASSIMP_BUILD_AC_IMPORTER=OFF
        -DASSIMP_BUILD_ASE_IMPORTER=OFF
        -DASSIMP_BUILD_ASSBIN_IMPORTER=OFF
        -DASSIMP_BUILD_ASSXML_IMPORTER=OFF
        -DASSIMP_BUILD_B3D_IMPORTER=OFF
        -DASSIMP_BUILD_BVH_IMPORTER=OFF
        -DASSIMP_BUILD_COLLADA_IMPORTER=OFF
        -DASSIMP_BUILD_DXF_IMPORTER=OFF
        -DASSIMP_BUILD_CSM_IMPORTER=OFF
        -DASSIMP_BUILD_HMP_IMPORTER=OFF
        -DASSIMP_BUILD_IRRMESH_IMPORTER=OFF
        -DASSIMP_BUILD_IRR_IMPORTER=OFF
        -DASSIMP_BUILD_LWO_IMPORTER=OFF
        -DASSIMP_BUILD_LWS_IMPORTER=OFF
        -DASSIMP_BUILD_MD2_IMPORTER=OFF
        -DASSIMP_BUILD_MD3_IMPORTER=OFF
        -DASSIMP_BUILD_MD5_IMPORTER=OFF
        -DASSIMP_BUILD_MDC_IMPORTER=OFF
        -DASSIMP_BUILD_MDL_IMPORTER=OFF
        -DASSIMP_BUILD_NFF_IMPORTER=OFF
        -DASSIMP_BUILD_NDO_IMPORTER=OFF
        -DASSIMP_BUILD_OFF_IMPORTER=OFF
        -DASSIMP_BUILD_OBJ_IMPORTER=ON
        -DASSIMP_BUILD_OGRE_IMPORTER=OFF
        -DASSIMP_BUILD_OPENGEX_IMPORTER=OFF
        -DASSIMP_BUILD_PLY_IMPORTER=OFF
        -DASSIMP_BUILD_MS3D_IMPORTER=OFF
        -DASSIMP_BUILD_COB_IMPORTER=OFF
        -DASSIMP_BUILD_BLEND_IMPORTER=OFF
        -DASSIMP_BUILD_IFC_IMPORTER=OFF
        -DASSIMP_BUILD_XGL_IMPORTER=OFF
        -DASSIMP_BUILD_XGL_IMPORTER=OFF
        -DASSIMP_BUILD_FBX_IMPORTER=ON
        -DASSIMP_BUILD_Q3D_IMPORTER=OFF
        -DASSIMP_BUILD_Q3BSP_IMPORTER=OFF
        -DASSIMP_BUILD_RAW_IMPORTER=OFF
        -DASSIMP_BUILD_SIB_IMPORTER=OFF
        -DASSIMP_BUILD_SMD_IMPORTER=OFF
        -DASSIMP_BUILD_STL_IMPORTER=OFF
        -DASSIMP_BUILD_TERRAGEN_IMPORTER=OFF
        -DASSIMP_BUILD_3D_IMPORTER=OFF
        -DASSIMP_BUILD_X_IMPORTER=OFF
        -DASSIMP_BUILD_X3D_IMPORTER=OFF
        -DASSIMP_BUILD_GLTF_IMPORTER=ON
        -DASSIMP_BUILD_3MF_IMPORTER=OFF
        -DASSIMP_BUILD_MMD_IMPORTER=OFF
        -DASSIMP_BUILD_STEP_IMPORTER=OFF
        -DASSIMP_BUILD_M3D_IMPORTER=OFF
        -DASSIMP_BUILD_IQM_IMPORTER=OFF
)


create_target(Target_imgui https://github.com/ocornut/imgui.git v1.90.8)
externalproject_add(Target_imgui
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_imgui
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E true
        BUILD_COMMAND ${CMAKE_COMMAND} -E true
        INSTALL_COMMAND ${CMAKE_COMMAND} -E true
)


create_target(Target_pugixml https://github.com/zeux/pugixml.git v1.14)
externalproject_add(Target_pugixml
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_pugixml
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
)


create_target_patch(Target_OGRE https://github.com/OGRECave/ogre.git v14.3.0 ogre-14.3.0.patch)
externalproject_add(Target_OGRE
        EXCLUDE_FROM_ALL true
        DEPENDS Target_imgui Target_pugixml
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OGRE
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DOGRE_STATIC=ON
        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
        -DOGRE_DEPENDENCIES_DIR=${DEPS_ROOT}
        -DOGRE_ENABLE_PRECOMPILED_HEADERS=ON
        -DOGRE_BUILD_LIBS_AS_FRAMEWORKS=OFF
        -DOGRE_PROFILING=OFF
        -DOGRE_ASSERT_MODE=2
        -DOGRE_CONFIG_THREADS=3
        -DOGRE_CONFIG_THREAD_PROVIDER=std
        -DOGRE_CONFIG_DOUBLE=OFF
        -DOGRE_CONFIG_NODE_INHERIT_TRANSFORM=OFF
        -DOGRE_NODELESS_POSITIONING=OFF
        -DOGRE_CONFIG_ENABLE_MESHLOD=ON
        -DOGRE_CONFIG_ENABLE_DDS=ON
        -DOGRE_CONFIG_ENABLE_PVRTC=OFF
        -DOGRE_CONFIG_ENABLE_ETC=OFF
        -DOGRE_CONFIG_ENABLE_ASTC=OFF
        -DOGRE_CONFIG_ENABLE_QUAD_BUFFER_STEREO=OFF
        -DOGRE_CONFIG_ENABLE_ZIP=ON
        -DOGRE_CONFIG_ENABLE_VIEWPORT_ORIENTATIONMODE=OFF
        -DOGRE_BUILD_COMPONENT_PYTHON=OFF
        -DOGRE_BUILD_COMPONENT_JAVA=OFF
        -DOGRE_BUILD_COMPONENT_CSHARP=OFF
        -DOGRE_RESOURCEMANAGER_STRICT=0
        -DOGRE_BUILD_RENDERSYSTEM_D3D11=OFF
        -DOGRE_BUILD_RENDERSYSTEM_D3D9=OFF
        -DOGRE_BUILD_PLUGIN_CG=OFF
        -DOGRE_BUILD_PLUGIN_GLSLANG=OFF
        -DOGRE_BUILD_RENDERSYSTEM_METAL=OFF
        -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON
        -DOGRE_BUILD_RENDERSYSTEM_GLES2=ON
        -DOGRE_BUILD_RENDERSYSTEM_GL=OFF
        -DOGRE_GLSUPPORT_USE_EGL=OFF
        -DOGRE_USE_WAYLAND=OFF
        -DOGRE_CONFIG_ENABLE_GLES3_SUPPORT=ON
        -DOGRE_CONFIG_ENABLE_GLES2_CG_SUPPORT=OFF
        -DOGRE_CONFIG_ENABLE_GL_STATE_CACHE_SUPPORT=ON
        -DOGRE_CONFIG_ENABLE_GLES2_GLSL_OPTIMISER=OFF
        -DOGRE_BUILD_RENDERSYSTEM_VULKAN=OFF
        -DOGRE_BUILD_RENDERSYSTEM_TINY=OFF
        -DOGRE_BUILD_COMPONENT_OVERLAY=ON
        -DOGRE_BUILD_COMPONENT_OVERLAY_IMGUI=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_Freetype=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_FreeImage=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_SDL2=ON
        -DIMGUI_DIR=${DEPS_SOURCE_LOCATION}/Target_imgui
        -DOGRE_BUILD_COMPONENT_BITES=OFF
        -DOGRE_BUILD_COMPONENT_BULLET=OFF
        -DOGRE_BITES_STATIC_PLUGINS=ON
        -DOGRE_BUILD_COMPONENT_PAGING=ON
        -DOGRE_BUILD_COMPONENT_MESHLODGENERATOR=ON
        -DOGRE_BUILD_COMPONENT_PROPERTY=OFF
        -DOGRE_BUILD_COMPONENT_VOLUME=ON
        -DOGRE_BUILD_COMPONENT_TERRAIN=ON
        -DOGRE_BUILD_PLUGIN_FREEIMAGE=OFF
        -DOGRE_BUILD_PLUGIN_EXRCODEC=OFF
        -DOGRE_BUILD_PLUGIN_ASSIMP=ON
        -DOGRE_BUILD_PLUGIN_STBI=ON
        -DOGRE_BUILD_PLUGIN_RSIMAGE=OFF
        -DOGRE_BUILD_PLUGIN_BSP=OFF
        -DOGRE_BUILD_PLUGIN_PCZ=OFF
        -DOGRE_BUILD_PLUGIN_PFX=ON
        -DOGRE_BUILD_PLUGIN_OCTREE=ON
        -DOGRE_BUILD_PLUGIN_DOT_SCENE=OFF
        -DOGRE_BUILD_COMPONENT_HLMS=OFF
        -DOGRE_BUILD_COMPONENT_RTSHADERSYSTEM=ON
        -DOGRE_BUILD_RTSHADERSYSTEM_SHADERS=ON
        -DOGRE_BUILD_DEPENDENCIES=OFF
        -DOGRE_BUILD_SAMPLES=OFF
        -DOGRE_INSTALL_SAMPLES_SOURCE=OFF
        -DOGRE_INSTALL_SAMPLES=OFF
        -DOGRE_BUILD_TOOLS=ON
        -DOGRE_BUILD_XSIEXPORTER=OFF
        -DOGRE_INSTALL_PDB=OFF
        -DOGRE_INSTALL_DOCS=OFF
        -DOGRE_BUILD_TESTS=OFF
        -DOGRE_BUILD_LIBS_AS_FRAMEWORKS=OFF
        -DOGRE_BUILD_PLATFORM_APPLE_IOS=OFF
)


externalproject_add(Target_OgreProcedural
        EXCLUDE_FROM_ALL true
        DEPENDS Target_OGRE
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OgreProcedural
        GIT_REPOSITORY https://github.com/OGRECave/ogre-procedural.git
        GIT_TAG 4ca681bf88de5c05b863555cf0a34cd0c44ad794
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DOgreProcedural_UNITY_BUILD=OFF
        -DOgreProcedural_BUILD_SAMPLES=OFF
        -DOgreProcedural_BUILD_TESTS=OFF
        -DOgreProcedural_BUILD_DOCS=OFF
        -DOgreProcedural_STATIC=ON
)


create_target(Target_Lua https://github.com/lua/lua.git v5.4.7)
externalproject_add(Target_Lua
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Lua
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DEPS_PATCH_LOCATION}/lua.cmake ${DEPS_SOURCE_LOCATION}/Target_Lua/CMakeLists.txt
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DEPS_PATCH_LOCATION}/FindReadline.cmake ${DEPS_SOURCE_LOCATION}/Target_Lua/cmake/FindReadline.cmake
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DLUA_EXE=OFF
        -DLUA_DOC=OFF
        -DLUA_BUILD_WLUA=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DLUA_USE_READLINE=OFF
        -DLUA_USE_RELATIVE_LOADLIB=OFF
        -DLUA_USE_POSIX=OFF
        -DLUA_USE_DLOPEN=OFF
)


create_target(Target_sol2 https://github.com/ThePhD/sol2.git v3.3.1)
externalproject_add(Target_sol2
        EXCLUDE_FROM_ALL true
        DEPENDS Target_Lua
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_sol2
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${CMAKE_COMMAND} -P ${DEPS_PATCH_LOCATION}/PatchSOL2.cmake
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DSOL2_LUA_VERSION=5.4.4
        -DLUA_INCLUDE_DIR=${DEPS_INCLUDE_DIR}
        -DLUA_LIBRARIES=lua
        -DSOL2_BUILD_LUA=OFF
        -DBUILD_LUA_AS_DLL=OFF
        -DLUA_FOUND=ON
        -DCREATE_LUALIB_TARGET=OFF
        -DCMAKE_DISABLE_FIND_PACKAGE_Lua=ON
)


create_target(Target_LibreSSL https://github.com/PowerShell/LibreSSL.git V3.9.2.0)
externalproject_add(Target_LibreSSL
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_LibreSSL
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${CMAKE_COMMAND} -P ${DEPS_PATCH_LOCATION}/PatchLibreSSL.cmake
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DBUILD_SHARED_LIBS=OFF
        -DLIBRESSL_SKIP_INSTALL=OFF
        -DLIBRESSL_APPS=OFF
        -DLIBRESSL_TESTS=OFF
        -DENABLE_ASM=OFF
)


create_target_patch(Target_cpr https://github.com/libcpr/cpr.git 1.10.5 cpr-1.10.5.patch)
externalproject_add(Target_cpr
        EXCLUDE_FROM_ALL true
        DEPENDS Target_LibreSSL
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_cpr
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DBUILD_SHARED_LIBS=OFF
        -DCPR_ENABLE_CURL_HTTP_ONLY=ON
        -DCPR_USE_SYSTEM_CURL=OFF
        -DCURL_ZLIB=OFF
)


create_target(Target_sqlite https://github.com/SRombauts/SQLiteCpp.git 3.3.1)
externalproject_add(Target_sqlite
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_sqlite
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DSQLITECPP_BUILD_TESTS=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DSQLITECPP_USE_STACK_PROTECTION=OFF
        -DSQLITECPP_INCLUDE_SCRIPT=OFF
        -DSQLITE_ENABLE_COLUMN_METADATA=OFF
        -DSQLITECPP_RUN_CPPCHECK=OFF
        -DSQLITECPP_RUN_CPPLINT=OFF
        -DSQLITECPP_RUN_DOXYGEN=OFF
        -DSQLITECPP_BUILD_EXAMPLES=OFF
        -DSQLITE_OMIT_LOAD_EXTENSION=OFF
        -DSQLITECPP_USE_ASAN=OFF
        -DSQLITECPP_INTERNAL_SQLITE=ON
        -DSQLITECPP_DISABLE_STD_FILESYSTEM=ON
)


create_target(Target_libarchive https://github.com/libarchive/libarchive.git v3.7.6)
externalproject_add(Target_libarchive
        EXCLUDE_FROM_ALL true
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_libarchive
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DENABLE_WERROR=OFF
        -DENABLE_TAR=ON
        -DENABLE_CPIO=OFF
        -DENABLE_CAT=OFF
        -DENABLE_UNZIP=OFF
        -DENABLE_TEST=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DENABLE_INSTALL=ON
)


create_target(Target_yojimbo https://github.com/mas-bandwidth/yojimbo.git v1.2.5)
externalproject_add(Target_yojimbo
        EXCLUDE_FROM_ALL true
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_yojimbo
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        PATCH_COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DEPS_PATCH_LOCATION}/yojimbo.cmake ${DEPS_SOURCE_LOCATION}/Target_yojimbo/CMakeLists.txt
        CMAKE_ARGS
        -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
        -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
)


# create_target(Target_protoc https://github.com/protocolbuffers/protobuf.git v27.3)
# externalproject_add(Target_protoc
#         EXCLUDE_FROM_ALL true
#         PREFIX ${DEPS_PREFIX_LOCATION}
#         DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
#         SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_protoc
#         DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
#         PATCH_COMMAND ${PATCH_PLACEHOLDER}
#         CMAKE_ARGS
#         -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
#         -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
#         -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
#         -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
#         -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
#         -DCMAKE_BUILD_TYPE=Release
#         -DCMAKE_CXX_STANDARD=17
#         -DABSL_PROPAGATE_CXX_STD=ON
#         -Dprotobuf_BUILD_TESTS=OFF
#         -Dprotobuf_BUILD_EXAMPLES=OFF
#         -Dprotobuf_BUILD_PROTOBUF_BINARIES=ON
#         -Dprotobuf_BUILD_PROTOC_BINARIES=ON
#         -Dprotobuf_BUILD_SHARED_LIBS=OFF
#         -Dprotobuf_MSVC_STATIC_RUNTIME=OFF
#         -Dprotobuf_WITH_ZLIB=OFF
#         -Dprotobuf_DISABLE_RTTI=OFF
# )


# if (CMAKE_CROSSCOMPILING)
#     set(BUILD_PROTOC Target_protoc)
# else ()
#     set(BUILD_NATIVE_COMPILER ON)
# endif ()
# create_target(Target_protobuf https://github.com/protocolbuffers/protobuf.git v27.3)
# externalproject_add(Target_protobuf
#         EXCLUDE_FROM_ALL true
#         DEPENDS ${BUILD_PROTOC}
#         PREFIX ${DEPS_PREFIX_LOCATION}
#         DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
#         SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_protobuf
#         DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
#         PATCH_COMMAND ${PATCH_PLACEHOLDER}
#         CMAKE_ARGS
#         -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
#         -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
#         -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
#         -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
#         -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
#         -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
#         -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
#         -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
#         -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
#         -DANDROID_NDK=${ANDROID_NDK}
#         -DANDROID_ABI=${ANDROID_ABI}
#         -DANDROID_PLATFORM=${ANDROID_PLATFORM}
#         -DCMAKE_CXX_STANDARD=17
#         -DABSL_PROPAGATE_CXX_STD=ON
#         -Dprotobuf_BUILD_TESTS=OFF
#         -Dprotobuf_BUILD_EXAMPLES=OFF
#         -Dprotobuf_BUILD_PROTOBUF_BINARIES=ON
#         -Dprotobuf_BUILD_PROTOC_BINARIES=${BUILD_NATIVE_COMPILER}
#         -Dprotobuf_BUILD_SHARED_LIBS=OFF
#         -Dprotobuf_MSVC_STATIC_RUNTIME=OFF
#         -Dprotobuf_WITH_ZLIB=OFF
#         -Dprotobuf_DISABLE_RTTI=OFF
# )


# check_stamp_patch(Target_GameNetworkingSockets gns-62b3951.patch)
# externalproject_add(Target_GameNetworkingSockets
#         EXCLUDE_FROM_ALL true
#         DEPENDS Target_LibreSSL Target_protobuf
#         PREFIX ${DEPS_PREFIX_LOCATION}
#         DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
#         SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_GameNetworkingSockets
#         GIT_REPOSITORY https://github.com/ValveSoftware/GameNetworkingSockets.git
#         GIT_TAG 62b395172f157ca4f01eea3387d1131400f8d604
#         GIT_SHALLOW false
#         GIT_SUBMODULES src/external/curve25519-donna src/external/ed25519-donna src/external/picojson src/external/sha1-wpa
#         DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
#         PATCH_COMMAND ${PATCH_PLACEHOLDER}
#         CMAKE_ARGS
#         -DCMAKE_GENERATOR=${CMAKE_GENERATOR}
#         -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
#         -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
#         -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
#         -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
#         -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
#         -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
#         -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
#         -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
#         -DANDROID_NDK=${ANDROID_NDK}
#         -DANDROID_ABI=${ANDROID_ABI}
#         -DANDROID_PLATFORM=${ANDROID_PLATFORM}
#         -DCMAKE_CXX_STANDARD=17
#         -DABSL_PROPAGATE_CXX_STD=ON
#         -DBUILD_STATIC_LIB=ON
#         -DBUILD_SHARED_LIB=OFF
#         -DBUILD_EXAMPLES=OFF
#         -DBUILD_TESTS=OFF
#         -DBUILD_TOOLS=OFF
#         -DENABLE_ICE=ON
#         -DUSE_STEAMWEBRTC=OFF
#         -DLTO=OFF
#         -DUSE_CRYPTO25519=OpenSSL
#         -DMSVC_CRT_STATIC=OFF
#         -DOPENSSL_USE_STATIC_LIBS=ON
#         -DProtobuf_USE_STATIC_LIBS=ON
# )


# list of dependency targets
if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
    add_custom_target(External ALL COMMAND ${CMAKE_COMMAND} -E true)
endif ()
add_custom_target(ExternalBuildAll COMMAND ${CMAKE_COMMAND} -E true)
add_custom_target(ExternalClearAll COMMAND ${CMAKE_COMMAND} -E rm -rf ${DEPS_PREFIX_LOCATION} ${DEPS_ROOT})
set_target_properties(ExternalBuildAll ExternalClearAll PROPERTIES FOLDER "ExternalProjectTargets")
list(APPEND CMAKE_PREFIX_PATH ${DEPS_ROOT})
list(APPEND CMAKE_FIND_ROOT_PATH ${DEPS_ROOT})
set(CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH false)
set(CMAKE_FIND_USE_PACKAGE_REGISTRYf false)

macro(add_external_target package)
    find_package(${package})
    add_dependencies(ExternalBuildAll Target_${package})
    if (NOT ${package}_FOUND AND (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR))
        add_dependencies(External Target_${package})
    endif ()
endmacro()

macro(find_package_static package)
    set(_OLD_FIND_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
    set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".a" ".so" ".sl" ".dylib" ".dll.a")
    find_package(${package})
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${_OLD_FIND_SUFFIXES})
    unset(_OLD_FIND_SUFFIXES)
endmacro()

macro(add_external_target_static package)
    find_package_static(${package})
    add_dependencies(ExternalBuildAll Target_${package})
    if (NOT ${package}_FOUND AND (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR))
        add_dependencies(External Target_${package})
    endif ()
endmacro()

set(OGRE_STATIC 1)
set(OGRE_IGNORE_ENV 1)
add_external_target(OGRE)
add_external_target_static(Vorbis)
add_external_target_static(Theora)
add_external_target_static(Bullet)
add_external_target_static(SDL2)
#add_external_target_static(sol2)
#add_external_target_static(yojimbo)
