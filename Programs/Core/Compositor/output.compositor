// This source file is part of "glue project". Created by Andrey Vasiliev

//----------------------------------------------------------------------------------------------------------------------
abstract fragment_program OutputI_fs glsl glsles
{
    source output.frag
    preprocessor_defines SSAO,BLOOM,FOG
	default_params
	{
		param_named_auto uFogColour fog_colour
		param_named_auto uFogParams fog_params
        param_named_auto farClipDistance far_clip_distance
        param_named uSSAOEnable float 0.0
        param_named uBloomEnable float 0.0
	}
}

fragment_program Output_fs glsl glsles : OutputI_fs {}

fragment_program OutputFinal_fs glsl glsles : OutputI_fs
{
    preprocessor_defines SSAO,BLOOM,FOG,SRGB
	default_params
	{
		param_named exposure float 1.0
	}
}

abstract material OutputI
{
	technique
	{
		pass
		{
			lighting off
            polygon_mode_overrideable false

			vertex_program_ref Ogre/Compositor/StdQuad_vp {}

			fragment_program_ref Output_fs
			{
			    param_named SceneSampler int 0
			    param_named sSceneDepthSampler int 1
			    param_named SsaoSampler int 2
			    param_named BloomSampler int 3
			}

			texture_unit
            {
                content_type compositor MRT mrt 0
                tex_address_mode clamp
                filtering linear linear none
            }

            texture_unit
            {
                content_type compositor MRT mrt 1
                tex_address_mode clamp
                filtering linear linear none
            }

            texture_unit SSAO {}

            texture_unit Bloom {}
		}
	}
}

material Output : OutputI {}

material OutputFinal : OutputI
{
	technique
	{
		pass
		{
			fragment_program_ref OutputFinal_fs {}
        }
	}
}

compositor Output
{
    technique
    {
        texture output target_width target_height PF_FLOAT16_RGB

        target output
        {
            pass render_quad
            {
                material Output
            }
        }
    }
}

compositor OutputFinal
{
    technique
    {
        target_output
        {
            pass render_quad
            {
                material OutputFinal
            }
        }
    }
}
