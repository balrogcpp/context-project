import PBR from PBR.material

vertex_program PBR_Reflective_vs glsl glsles
{
	source PBR.vert
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_UV,HAS_REFLECTION,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4
}

fragment_program PBR_Reflective_fs glsl glsles
{
	source PBR.frag
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_NORMALMAP,HAS_EMISSIVEMAP,HAS_ORM,HAS_REFLECTION,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4

    default_params
    {
        shared_params_ref PBR_Shared_frag
    }
}

abstract material PBR_Plane : PBR
{
    receive_shadows on
    transparency_casts_shadows off

    technique
    {
        pass
        {
            texture_unit ReflectionMap
            {
                texture black.dds
                filtering bilinear
            }

            vertex_program_ref PBR_Reflective_vs {}

            fragment_program_ref PBR_Reflective_fs
            {
                param_named uAlbedoSampler      int 0
                param_named uNormalSampler      int 1
                param_named uORMSampler         int 2
                param_named uEmissiveSampler    int 3
                param_named uReflectionMap      int 4
            }
        }
    }
}
