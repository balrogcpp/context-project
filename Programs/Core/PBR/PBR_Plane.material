// This source file is part of Glue Engine. Created by Andrey Vasiliev

import PBR from PBR.material
import PBR_vs from PBR.program
import PBR_BaseI_fs from PBR.program

vertex_program PBR_Reflective_vs glsl glsles : PBR_vs
{
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_UV,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4,HAS_REFLECTION
}

abstract fragment_program PBR_ReflectiveI_fs glsl glsles : PBR_BaseI_fs
{
    preprocessor_defines HAS_NORMALS,HAS_TANGENTS,HAS_BASECOLORMAP,HAS_EMISSIVEMAP,HAS_NORMALMAP,HAS_ORM,MAX_LIGHTS=8,SHADOWRECEIVER,MAX_SHADOW_TEXTURES=4,HAS_REFLECTION
}

fragment_program PBR_Reflective_fs glsl glsles : PBR_ReflectiveI_fs
{
    default_params
    {
        param_named shadowMap0 int 5
        param_named shadowMap1 int 6
        param_named shadowMap2 int 7
        param_named shadowMap3 int 8
        param_named_auto shadowTexel0 inverse_texture_size 5
        param_named_auto shadowTexel1 inverse_texture_size 6
        param_named_auto shadowTexel2 inverse_texture_size 7
        param_named_auto shadowTexel3 inverse_texture_size 8
    }
}

abstract material PBR_Plane
{
    transparency_casts_shadows off
    receive_shadows on

    set $Albedo white.dds
    set $Normal normal.dds
    set $ORM white.dds
    set $Emissive black.dds

    technique
    {
        pass
        {
            diffuse 1 1 1
            specular 1 1 1 1
            ambient 1 1 1
            emissive 0 0 0
            alpha_rejection greater_equal 127

            texture_unit Albedo
            {
                texture $Albedo
            }
            texture_unit Normal
            {
                texture $Normal
            }
            texture_unit ORM
            {
                texture $ORM
            }
            texture_unit Emissive
            {
                texture $Emissive
            }
            texture_unit ReflectionMap
            {
                texture violet.dds
                filtering bilinear
            }

            texture_unit shadowMap0
            {
                content_type shadow
                sampler_ref ShadowSampler
            }
            texture_unit shadowMap1
            {
                content_type shadow
                sampler_ref ShadowSampler
            }
            texture_unit shadowMap2
            {
                content_type shadow
                sampler_ref ShadowSampler
            }
            texture_unit shadowMap3
            {
                content_type shadow
                sampler_ref ShadowSampler
            }

            vertex_program_ref PBR_Reflective_vs {}

            fragment_program_ref PBR_Reflective_fs
            {
                param_named uAlbedoSampler      int 0
                param_named uNormalSampler      int 1
                param_named uORMSampler         int 2
                param_named uEmissiveSampler    int 3
                param_named uReflectionMap      int 4
            }
        }
    }
}
