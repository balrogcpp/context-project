// created by Andrey Vasiliev

//----------------------------------------------------------------------------------------------------------------------
// Tent downsampling
//----------------------------------------------------------------------------------------------------------------------
fragment_program hdr_start_fs glsl glsles hlsl
{
	source hdr_start.frag

    default_params
    {
        param_named_auto ViewportSize viewport_size
    }
}

fragment_program hdr_downsample_fs glsl glsles hlsl
{
	source hdr_downsample.frag
}

fragment_program boxv glsl glsles hlsl
{
	source boxv.frag
}

fragment_program boxh glsl glsles hlsl
{
	source boxh.frag
}

fragment_program bright_start glsl glsles hlsl
{
	source bright_start.frag

    default_params
    {
        param_named BrightThreshold float2 3.0 0.5
    }
}




fragment_program hdr_end_fs glsl glsles hlsl
{
	source hdr_end.frag

    default_params
    {
        param_named Exposure float3 553.5833 5.0 10.0
        param_named_auto timeSinceLast frame_time 1
    }
}


material HdrStart
{
    technique
    {
        pass
        {
            cull_hardware none
            depth_check off
            depth_write off
            polygon_mode_overrideable false

            vertex_program_ref StdQuad_vp {}

            fragment_program_ref bright_start
            {
                param_named RT int 0
                param_named_auto TexSize0 packed_texture_size 0
            }

            texture_unit RT
            {
                texture black.dds
                tex_address_mode clamp
                filtering bilinear
            }
        }
    }
}

material HdrDownsample
{
    technique
    {
        pass
        {
            cull_hardware none
            depth_check off
            depth_write off
            polygon_mode_overrideable false

            vertex_program_ref StdQuad_vp {}

            fragment_program_ref hdr_downsample_fs
            {
                param_named RT int 0
                param_named_auto TexelSize0 inverse_texture_size 0
            }

            texture_unit RT
            {
                texture black.dds
                tex_address_mode clamp
                filtering bilinear
            }
        }
    }
}




material HdrEnd
{
    technique
    {
        pass
        {
            cull_hardware none
            depth_check off
            depth_write off
            polygon_mode_overrideable false

            vertex_program_ref StdQuad_vp {}

            fragment_program_ref hdr_end_fs 
            {
                param_named RT int 0
                param_named OldLum int 1
                param_named_auto TexelSize0 inverse_texture_size 0
            }

            texture_unit RT
            {
                texture black.dds
                tex_address_mode clamp
                filtering bilinear
            }
            texture_unit OldLum
            {
                texture grey.dds
                tex_address_mode clamp
                filtering none
            }
        }
    }
}


//----------------------------------------------------------------------------------------------------------------------
// HDR itself
//----------------------------------------------------------------------------------------------------------------------
fragment_program HDR_fs glsl glsles hlsl
{
    source hdr.frag
}

material HDR
{
	technique
	{
		pass
		{
		    cull_hardware none
			depth_check off
            depth_write off
            polygon_mode_overrideable false

			vertex_program_ref StdQuad_vp {}

			fragment_program_ref HDR_fs
			{
                param_named RT int 0
                param_named Lum int 1
                param_named Bloom int 2
			}

			texture_unit RT
            {
                texture black.dds
                tex_address_mode clamp
                filtering none
            }
			texture_unit Lum
            {
                texture black.dds
                tex_address_mode clamp
                filtering none
            }
            texture_unit Bloom
            {
                texture black.dds
                tex_address_mode clamp
                filtering none
            }
		}
	}
}



material BrightStart
{
    technique
    {
        pass
        {
            cull_hardware none
            depth_check off
            depth_write off
            polygon_mode_overrideable false

            vertex_program_ref StdQuad_vp {}

            fragment_program_ref hdr_end_fs 
            {
                param_named RT int 0
                param_named OldLum int 1
                param_named_auto TexelSize0 inverse_texture_size 0
            }

            texture_unit RT
            {
                texture black.dds
                tex_address_mode clamp
                filtering bilinear
            }
            texture_unit OldLum
            {
                texture grey.dds
                tex_address_mode clamp
                filtering none
            }
        }
    }
}


material BoxV
{
    technique
    {
        pass
        {
            cull_hardware none
            depth_check off
            depth_write off
            polygon_mode_overrideable false

            vertex_program_ref StdQuad_vp {}

            fragment_program_ref boxv
            {
                param_named RT int 0
                param_named_auto TexelSize0 inverse_texture_size 0
            }

            texture_unit RT
            {
                texture black.dds
                tex_address_mode clamp
                filtering bilinear
            }
        }
    }
}


material BoxH
{
    technique
    {
        pass
        {
            cull_hardware none
            depth_check off
            depth_write off
            polygon_mode_overrideable false

            vertex_program_ref StdQuad_vp {}

            fragment_program_ref boxh
            {
                param_named RT int 0
                param_named_auto TexelSize0 inverse_texture_size 0
            }

            texture_unit RT
            {
                texture black.dds
                tex_address_mode clamp
                filtering bilinear
            }
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------
// Tonemap
//----------------------------------------------------------------------------------------------------------------------
fragment_program tonemap_fs glsl glsles hlsl
{
    source tonemap.frag
}

material Tonemap
{
	technique
	{
		pass
		{
		    cull_hardware none
			depth_check off
            depth_write off
            polygon_mode_overrideable false

			vertex_program_ref StdQuad_vp {}

			fragment_program_ref tonemap_fs
			{
                param_named RT int 0
			}

			texture_unit RT
            {
                texture black.dds
                tex_address_mode clamp
                filtering bilinear
            }
		}
	}
}
