# cmake min version
cmake_minimum_required(VERSION 3.18.1)


# project
project(contrib)


# externalproject_add and c++ flags
include(ExternalProject)
include(CppFlags)


# externalproject_add require git
find_package(Git REQUIRED)


# cached variables
set(DEPS_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/sdk/${TOOLCHAIN_FULL}_${CMAKE_BUILD_TYPE} CACHE PATH "")
set(DEPS_PREFIX_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/build/${TOOLCHAIN_FULL}_${CMAKE_BUILD_TYPE})
set(DEPS_SOURCE_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/download)
set(DEPS_PATCH_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/patch)
set(DEPS_INCLUDE_DIR ${DEPS_ROOT}/include CACHE PATH "")
set(DEPS_LIB_DIR ${DEPS_ROOT}/lib CACHE PATH "")
set(DEPS_BIN_DIR ${DEPS_ROOT}/bin CACHE PATH "")
if (ANDROID)
    set(DEPS_CMAKE_FLAGS " -DANDROID_NDK=${ANDROID_NDK} -DANDROID_ABI=${ANDROID_ABI} -DANDROID_PLATFORM=${ANDROID_PLATFORM}")
endif ()
set(DEPS_CXX_FLAGS ${CMAKE_CXX_FLAGS})
set(DEPS_C_FLAGS ${CMAKE_C_FLAGS})
set(DEPS_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})
set(DEPS_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS})
set(DEPS_STATIC_LINKER_FLAGS ${CMAKE_STATIC_LINKER_FLAGS})
set(STAMP_FILE ${DEPS_SOURCE_LOCATION}/delete_me)
if (EXISTS ${STAMP_FILE})
    set(SKIP_DOWNLOAD ${CMAKE_COMMAND} -E true)
endif ()


# list of thirdparty targets
if (NOT EMSCRIPTEN)
    set(SDL2_CHDIR ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/Target_SDL2)
    externalproject_add(Target_SDL2
            EXCLUDE_FROM_ALL true
            BUILD_ALWAYS false
            BUILD_IN_SOURCE false
            PREFIX ${DEPS_PREFIX_LOCATION}
            DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
            SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_SDL2
            GIT_REPOSITORY https://github.com/libsdl-org/SDL.git
            GIT_TAG release-2.24.0
            GIT_SHALLOW true
            GIT_PROGRESS false
            DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
            UPDATE_COMMAND ${SDL2_CHDIR} ${GIT_EXECUTABLE} reset --hard
            PATCH_COMMAND ${SDL2_CHDIR} ${GIT_EXECUTABLE} apply ${DEPS_PATCH_LOCATION}/sdl2-2.24.0.patch
            CMAKE_ARGS
            -G "${CMAKE_GENERATOR}"
            -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
            -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
            -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
            -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
            -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
            -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
            -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
            ${DEPS_CMAKE_FLAGS}
            -DSDL_SHARED_ENABLED_BY_DEFAULT=OFF
            -DLIBC=ON
            -DSDL_LIBC=ON
            -DRENDER_METAL=OFF
            -DSDL_RENDER_METAL=OFF
            -DHIDAPI=OFF
            -DSDL_HIDAPI=OFF
            -DSDL_HIDAPI_JOYSTICK=OFF
            )
else ()
    add_custom_target(Target_SDL2 COMMAND ${CMAKE_COMMAND} -E true)
endif ()


externalproject_add(Target_OIS
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OIS
        GIT_REPOSITORY https://github.com/wgois/OIS.git
        GIT_TAG v1.5.1
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DOIS_BUILD_SHARED_LIBS=OFF
        -DOIS_BUILD_DEMOS=OFF
        )


externalproject_add(Target_Bullet
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Bullet
        GIT_REPOSITORY https://github.com/bulletphysics/bullet3.git
        GIT_TAG 3.24
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DCMAKE_RELWITHDEBINFO_POSTFIX=
        -DCMAKE_DEBUG_POSTFIX=
        -DCMAKE_RELEASE_POSTFIX=
        -DCMAKE_MINSIZEREL_POSTFIX=
        -DCLAMP_VELOCITIES=0
        -DBULLET2_MULTITHREADING=ON
        -DBUILD_BULLET2_DEMOS=OFF
        -DBUILD_OPENGL3_DEMOS=OFF
        -DBUILD_CPU_DEMOS=OFF
        -DBUILD_EXTRAS=OFF
        -DBUILD_ENET=OFF
        -DBUILD_CLSOCKET=OFF
        -DUSE_GRAPHICAL_BENCHMARK=OFF
        -DBUILD_UNIT_TESTS=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DUSE_SOFT_BODY_MULTI_BODY_DYNAMICS_WORLD=OFF
        -DINSTALL_LIBS=ON
        -DUSE_MSVC_RUNTIME_LIBRARY_DLL=ON
        -DUSE_MSVC_SSE2=ON
        -DUSE_MSVC_AVX=OFF
        -DUSE_MSVC_FAST_FLOATINGPOINT=ON
        -DINTERNAL_CREATE_MSVC_RELATIVE_PATH_PROJECTFILES=OFF
        )


if (NOT EMSCRIPTEN)
    set(OPENAL_CHDIR ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/Target_OpenAL)
    externalproject_add(Target_OpenAL
            EXCLUDE_FROM_ALL true
            BUILD_ALWAYS false
            BUILD_IN_SOURCE false
            PREFIX ${DEPS_PREFIX_LOCATION}
            DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
            SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OpenAL
            GIT_REPOSITORY https://github.com/kcat/openal-soft.git
            GIT_TAG 1.22.2
            GIT_SHALLOW true
            GIT_PROGRESS false
            DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
            UPDATE_COMMAND ${OPENAL_CHDIR} ${GIT_EXECUTABLE} reset --hard
            PATCH_COMMAND ${OPENAL_CHDIR} ${GIT_EXECUTABLE} apply ${DEPS_PATCH_LOCATION}/openal-1.21.1.patch
            CMAKE_ARGS
            -G "${CMAKE_GENERATOR}"
            -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
            -DCMAKE_FIND_ROOT_PATH=${CMAKE_EXTRA_ROOT_PATH}
            -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
            -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
            -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
            -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
            -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
            -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
            ${DEPS_CMAKE_FLAGS}
            -DALSOFT_TESTS=OFF
            -DALSOFT_UTILS=OFF
            -DALSOFT_EXAMPLES=OFF
            -DALSOFT_CONFIG=OFF
            -DALSOFT_EAX=OFF
            -DALSOFT_BACKEND_SDL2=OFF
            -DALSOFT_BACKEND_SNDIO=OFF
            -DALSOFT_BACKEND_WASAPI=OFF
            -DALSOFT_BACKEND_WINMM=OFF
            -DALSOFT_BACKEND_WAVE=OFF
            -DLIBTYPE=SHARED
            -DALSOFT_OSX_FRAMEWORK=OFF
            )
else ()
    add_custom_target(Target_OpenAL COMMAND ${CMAKE_COMMAND} -E true)
endif ()


set(OGG_CHDIR ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/Target_Ogg)
externalproject_add(Target_Ogg
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_OpenAL
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Ogg
        GIT_REPOSITORY https://github.com/xiph/ogg.git
        GIT_TAG v1.3.5
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        UPDATE_COMMAND ${OGG_CHDIR} ${GIT_EXECUTABLE} reset --hard
        PATCH_COMMAND ${OGG_CHDIR} ${GIT_EXECUTABLE} apply ${DEPS_PATCH_LOCATION}/ogg-1.3.5.patch
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DINSTALL_DOCS=OFF
        -DINSTALL_PKG_CONFIG_MODULE=OFF
        -DINSTALL_CMAKE_PACKAGE_MODULE=ON
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_FRAMEWORK=OFF
        -DBUILD_TESTING=OFF
        )


externalproject_add(Target_Vorbis
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_Ogg
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Vorbis
        GIT_REPOSITORY https://github.com/xiph/vorbis.git
        GIT_TAG v1.3.7
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DOGG_INCLUDE_DIR=${DEPS_ROOT}/include #for Android
        -DOGG_LIBRARY=${DEPS_ROOT}/lib/libogg.a #for Android
        )


if (NOT EMSCRIPTEN)
    externalproject_add(Target_zlib
            EXCLUDE_FROM_ALL true
            BUILD_ALWAYS false
            BUILD_IN_SOURCE false
            PREFIX ${DEPS_PREFIX_LOCATION}
            DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
            SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_zlib
            GIT_REPOSITORY https://github.com/madler/zlib.git
            GIT_TAG v1.2.12
            GIT_SHALLOW true
            GIT_PROGRESS false
            DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
            CMAKE_ARGS
            -G "${CMAKE_GENERATOR}"
            -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
            -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
            -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
            -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
            -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
            -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
            -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
            -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
            -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
            ${DEPS_CMAKE_FLAGS}
            -DBUILD_SHARED_LIBS=OFF
            TEST_COMMAND ${CMAKE_COMMAND} -E chdir ${DEPS_ROOT}
            ${CMAKE_COMMAND} -E remove -f lib/libz.so lib/libzlib.dll.a lib/zlib.lib bin/libzlib.dll bin/zlib.dll lib/libz.dylib
            TEST_AFTER_INSTALL true
            )
else ()
    add_custom_target(Target_zlib COMMAND ${CMAKE_COMMAND} -E true)
endif ()


externalproject_add(Target_ZZIP
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_zlib
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_ZZIP
        GIT_REPOSITORY https://github.com/gdraheim/zziplib.git
        GIT_TAG v0.13.72
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_STATIC_LIBS=ON
        -DMSVC_STATIC_RUNTIME=OFF
        -DZZIPMMAPPED=OFF
        -DZZIPFSEEKO=OFF
        -DZZIPWRAP=OFF
        -DZZIPSDL=OFF
        -DZZIPDOCS=OFF
        -DZZIPTEST=OFF
        -DZZIPBINS=OFF
        ${DEPS_CMAKE_FLAGS}
        )


externalproject_add(Target_pugixml
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_pugixml
        GIT_REPOSITORY https://github.com/zeux/pugixml.git
        GIT_TAG v1.12.1
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        )


externalproject_add(Target_PNG
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_zlib
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_PNG
        GIT_REPOSITORY https://github.com/glennrp/libpng.git
        GIT_TAG v1.6.37
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DPNG_SHARED=OFF
        -DPNG_TESTS=OFF
        )


externalproject_add(Target_FreeType
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_zlib
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_FreeType
        GIT_REPOSITORY https://github.com/freetype/freetype.git
        GIT_TAG VER-2-12-1
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DCMAKE_DISABLE_FIND_PACKAGE_ZLIB=OFF
        -DCMAKE_DISABLE_FIND_PACKAGE_BZip2=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_PNG=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_HarfBuzz=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_BrotliDec=ON
        -DFT_DISABLE_ZLIB=OFF
        -DFT_DISABLE_BZIP2=ON
        -DFT_DISABLE_PNG=ON
        -DFT_DISABLE_HARFBUZZ=ON
        -DFT_DISABLE_BROTLI=ON
        -DBUILD_SHARED_LIBS=OFF
        )


externalproject_add(Target_rapidjson
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_rapidjson
        GIT_REPOSITORY https://github.com/Tencent/rapidjson.git
        GIT_TAG 27c3a8dc0e2c9218fe94986d249a12b5ed838f1d
        GIT_SHALLOW false
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DRAPIDJSON_BUILD_DOC=OFF
        -DRAPIDJSON_BUILD_EXAMPLES=OFF
        -DRAPIDJSON_BUILD_TESTS=OFF
        -DRAPIDJSON_BUILD_THIRDPARTY_GTEST=OFF
        -DRAPIDJSON_HAS_STDSTRING=ON
        )


set(ASSIMP_CHDIR ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/Target_assimp)
externalproject_add(Target_assimp
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_zlib
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_assimp
        GIT_REPOSITORY https://github.com/assimp/assimp.git
        GIT_TAG v5.2.5
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        UPDATE_COMMAND ${ASSIMP_CHDIR} ${CMAKE_COMMAND} -E true
        PATCH_COMMAND ${ASSIMP_CHDIR} ${CMAKE_COMMAND} -E true
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        ${DEPS_CMAKE_FLAGS}
        -DASSIMP_WARNINGS_AS_ERRORS=OFF
        -DASSIMP_BUILD_SAMPLES=OFF
        -DASSIMP_INSTALL_PDB=OFF
        -DINJECT_DEBUG_POSTFIX=OFF
        -DASSIMP_INJECT_DEBUG_POSTFIX=OFF
        -DASSIMP_IGNORE_GIT_HASH=ON
        -DASSIMP_BUILD_TESTS=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
        -DASSIMP_NO_EXPORT=ON
        -DASSIMP_BUILD_AMF_IMPORTER=OFF
        -DASSIMP_BUILD_3DS_IMPORTER=ON
        -DASSIMP_BUILD_AC_IMPORTER=OFF
        -DASSIMP_BUILD_ASE_IMPORTER=OFF
        -DASSIMP_BUILD_ASSBIN_IMPORTER=OFF
        -DASSIMP_BUILD_ASSXML_IMPORTER=OFF
        -DASSIMP_BUILD_B3D_IMPORTER=OFF
        -DASSIMP_BUILD_BVH_IMPORTER=OFF
        -DASSIMP_BUILD_COLLADA_IMPORTER=ON
        -DASSIMP_BUILD_DXF_IMPORTER=OFF
        -DASSIMP_BUILD_CSM_IMPORTER=OFF
        -DASSIMP_BUILD_HMP_IMPORTER=OFF
        -DASSIMP_BUILD_IRRMESH_IMPORTER=OFF
        -DASSIMP_BUILD_IRR_IMPORTER=OFF
        -DASSIMP_BUILD_LWO_IMPORTER=OFF
        -DASSIMP_BUILD_LWS_IMPORTER=OFF
        -DASSIMP_BUILD_MD2_IMPORTER=OFF
        -DASSIMP_BUILD_MD3_IMPORTER=OFF
        -DASSIMP_BUILD_MD5_IMPORTER=OFF
        -DASSIMP_BUILD_MDC_IMPORTER=OFF
        -DASSIMP_BUILD_MDL_IMPORTER=OFF
        -DASSIMP_BUILD_NFF_IMPORTER=OFF
        -DASSIMP_BUILD_NDO_IMPORTER=OFF
        -DASSIMP_BUILD_OFF_IMPORTER=OFF
        -DASSIMP_BUILD_OBJ_IMPORTER=ON
        -DASSIMP_BUILD_OGRE_IMPORTER=OFF
        -DASSIMP_BUILD_OPENGEX_IMPORTER=ON
        -DASSIMP_BUILD_PLY_IMPORTER=ON
        -DASSIMP_BUILD_MS3D_IMPORTER=OFF
        -DASSIMP_BUILD_COB_IMPORTER=OFF
        -DASSIMP_BUILD_BLEND_IMPORTER=ON
        -DASSIMP_BUILD_IFC_IMPORTER=OFF
        -DASSIMP_BUILD_XGL_IMPORTER=OFF
        -DASSIMP_BUILD_XGL_IMPORTER=OFF
        -DASSIMP_BUILD_FBX_IMPORTER=ON
        -DASSIMP_BUILD_Q3D_IMPORTER=OFF
        -DASSIMP_BUILD_Q3BSP_IMPORTER=OFF
        -DASSIMP_BUILD_RAW_IMPORTER=ON
        -DASSIMP_BUILD_SIB_IMPORTER=OFF
        -DASSIMP_BUILD_SMD_IMPORTER=OFF
        -DASSIMP_BUILD_STL_IMPORTER=ON
        -DASSIMP_BUILD_TERRAGEN_IMPORTER=OFF
        -DASSIMP_BUILD_3D_IMPORTER=OFF
        -DASSIMP_BUILD_X_IMPORTER=OFF
        -DASSIMP_BUILD_X3D_IMPORTER=ON
        -DASSIMP_BUILD_GLTF_IMPORTER=ON
        -DASSIMP_BUILD_3MF_IMPORTER=OFF
        -DASSIMP_BUILD_MMD_IMPORTER=OFF
        -DASSIMP_BUILD_STEP_IMPORTER=OFF
        )


set(OGRE_CHDIR ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/Target_OGRE)
externalproject_add(Target_OGRE
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_zlib Target_FreeType Target_SDL2 Target_Bullet Target_pugixml
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OGRE
        GIT_REPOSITORY https://github.com/OGRECave/ogre.git
        GIT_TAG v13.4.4
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        UPDATE_COMMAND ${OGRE_CHDIR} ${GIT_EXECUTABLE} reset --hard
        PATCH_COMMAND ${OGRE_CHDIR} ${GIT_EXECUTABLE} apply ${DEPS_PATCH_LOCATION}/ogre-13.4.0.patch
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${CMAKE_EXTRA_ROOT_PATH}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DOGRE_DEPENDENCIES_DIR=${DEPS_ROOT}
        -DOGRE_ENABLE_PRECOMPILED_HEADERS=ON
        -DOGRE_BUILD_LIBS_AS_FRAMEWORKS=OFF
        -DOGRE_ASSERT_MODE=2
        -DOGRE_CONFIG_THREADS=3
        -DOGRE_CONFIG_THREAD_PROVIDER=std
        -DOGRE_CONFIG_DOUBLE=OFF
        -DOGRE_CONFIG_NODE_INHERIT_TRANSFORM=OFF
        -DOGRE_STATIC=ON
        -DOGRE_NODELESS_POSITIONING=OFF
        -DOGRE_CONFIG_ENABLE_MESHLOD=ON
        -DOGRE_CONFIG_ENABLE_DDS=ON
        -DOGRE_CONFIG_ENABLE_PVRTC=ON
        -DOGRE_CONFIG_ENABLE_ETC=ON
        -DOGRE_CONFIG_ENABLE_ASTC=ON
        -DOGRE_CONFIG_ENABLE_QUAD_BUFFER_STEREO=OFF
        -DOGRE_CONFIG_ENABLE_ZIP=ON
        -DOGRE_CONFIG_ENABLE_VIEWPORT_ORIENTATIONMODE=OFF
        -DOGRE_BUILD_COMPONENT_PYTHON=OFF
        -DOGRE_BUILD_COMPONENT_JAVA=OFF
        -DOGRE_BUILD_COMPONENT_CSHARP=OFF
        -DOGRE_RESOURCEMANAGER_STRICT=2
        -DOGRE_BUILD_RENDERSYSTEM_D3D11=OFF
        -DOGRE_BUILD_RENDERSYSTEM_D3D9=OFF
        -DOGRE_BUILD_PLUGIN_CG=OFF
        -DOGRE_BUILD_PLUGIN_GLSLANG=OFF
        -DOGRE_BUILD_RENDERSYSTEM_METAL=OFF
        -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON
        -DOGRE_BUILD_RENDERSYSTEM_GLES2=OFF
        -DOGRE_BUILD_RENDERSYSTEM_GL=OFF
        -DOGRE_CONFIG_ENABLE_GLES3_SUPPORT=ON
        -DOGRE_CONFIG_ENABLE_GLES2_CG_SUPPORT=OFF
        -DOGRE_CONFIG_ENABLE_GL_STATE_CACHE_SUPPORT=OFF
        -DOGRE_CONFIG_ENABLE_GLES2_GLSL_OPTIMISER=OFF
        -DOGRE_BUILD_RENDERSYSTEM_VULKAN=OFF
        -DOGRE_BUILD_RENDERSYSTEM_TINY=OFF
        -DOGRE_BUILD_COMPONENT_OVERLAY=ON
        -DOGRE_BUILD_COMPONENT_BITES=OFF
        -DOGRE_BUILD_COMPONENT_BULLET=ON
        -DOGRE_BITES_STATIC_PLUGINS=ON
        -DOGRE_BUILD_COMPONENT_OVERLAY_IMGUI=ON
        -DOGRE_BUILD_COMPONENT_PAGING=OFF
        -DOGRE_BUILD_COMPONENT_MESHLODGENERATOR=OFF
        -DOGRE_BUILD_COMPONENT_PROPERTY=OFF
        -DOGRE_BUILD_COMPONENT_VOLUME=ON
        -DOGRE_BUILD_COMPONENT_TERRAIN=ON
        -DOGRE_BUILD_PLUGIN_FREEIMAGE=OFF
        -DOGRE_BUILD_PLUGIN_EXRCODEC=OFF
        -DOGRE_BUILD_PLUGIN_ASSIMP=OFF
        -DOGRE_BUILD_PLUGIN_STBI=ON
        -DOGRE_BUILD_PLUGIN_BSP=OFF
        -DOGRE_BUILD_PLUGIN_PCZ=OFF
        -DOGRE_BUILD_PLUGIN_PFX=ON
        -DOGRE_BUILD_PLUGIN_OCTREE=ON
        -DOGRE_BUILD_PLUGIN_DOT_SCENE=OFF
        -DOGRE_BUILD_COMPONENT_HLMS=OFF
        -DOGRE_BUILD_COMPONENT_RTSHADERSYSTEM=ON
        -DOGRE_BUILD_RTSHADERSYSTEM_SHADERS=ON
        -DOGRE_BUILD_DEPENDENCIES=OFF
        -DOGRE_BUILD_SAMPLES=OFF
        -DOGRE_INSTALL_SAMPLES_SOURCE=OFF
        -DOGRE_INSTALL_SAMPLES=OFF
        -DOGRE_BUILD_TOOLS=OFF
        -DOGRE_BUILD_XSIEXPORTER=OFF
        -DOGRE_INSTALL_PDB=OFF
        -DOGRE_INSTALL_DOCS=OFF
        -DOGRE_BUILD_TESTS=OFF
        -DOGRE_BUILD_LIBS_AS_FRAMEWORKS=OFF
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DOGRE_BUILD_PLATFORM_APPLE_IOS=OFF
        TEST_COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${DEPS_SOURCE_LOCATION}/Target_OGRE/RenderSystems/GLSupport/include/GLSL
        ${DEPS_ROOT}/include/OGRE/RenderSystems/GLES2
        TEST_AFTER_INSTALL true
        )


#externalproject_add(Target_OGRE2
#        EXCLUDE_FROM_ALL true
#        BUILD_ALWAYS false
#        BUILD_IN_SOURCE false
#        DEPENDS Target_rapidjson
#        PREFIX ${DEPS_PREFIX_LOCATION}
#        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
#        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OGRE2
#        GIT_REPOSITORY https://github.com/OGRECave/ogre-next.git
#        GIT_TAG v2.3.1
#        GIT_SHALLOW true
#        GIT_PROGRESS false
#        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
#        CMAKE_ARGS
#        -G "${CMAKE_GENERATOR}"
#        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
#        -DCMAKE_FIND_ROOT_PATH=${CMAKE_EXTRA_ROOT_PATH}
#        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
#        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
#        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
#        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
#        ${DEPS_CMAKE_FLAGS}
#        -DOGRE_STATIC=ON
#        -DOGRE_SIMD_SSE2=ON
#        -DOGRE_SIMD_NEON=ON
#        -DOGRE_RESTRICT_ALIASING=ON
#        -DOGRE_CONFIG_ENABLE_STBI=ON
#        -DOGRE_BUILD_PLUGIN_PFX=ON
#        -DOGRE_BUILD_COMPONENT_PLANAR_REFLECTIONS=ON
#        -DOGRE_BUILD_COMPONENT_RTSHADERSYSTEM=OFF
#        -DOGRE_CONFIG_ENABLE_TBB_SCHEDULER=OFF
#        -DOGRE_BUILD_RENDERSYSTEM_METAL=OFF
#        -DOGRE_CONFIG_ENABLE_TBB_SCHEDULER=ON
#        -DOGRE_CONFIG_ENABLE_MESHLOD=ON
#        -DOGRE_CONFIG_ENABLE_DDS=ON
#        -DOGRE_CONFIG_ENABLE_PVRTC=OFF
#        -DOGRE_CONFIG_ENABLE_ETC=OFF
#        -DOGRE_CONFIG_ENABLE_ASTC=OFF
#        -DOGRE_BUILD_SAMPLES2=OFF
#        -DOGRE_INSTALL_DOCS=OFF
#        -DOGRE_BUILD_TOOLS=OFF
#        -DOGRE_CONFIG_THREADS=0
#        -DOGRE_USE_BOOST=OFF
#        -DOGRE_CONFIG_THREAD_PROVIDER=std
#        -DCMAKE_SKIP_INSTALL_RPATH=ON
#        -DCMAKE_CXX_STANDARD=11
#        -DOGRE_INSTALL_DOCS=OFF
#        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
#        )


externalproject_add(Target_freeglut
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_freeglut
        GIT_REPOSITORY https://github.com/FreeGLUTProject/freeglut.git
        GIT_TAG v3.2.2
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${CMAKE_EXTRA_ROOT_PATH}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DFREEGLUT_BUILD_SHARED_LIBS=OFF
        -DFREEGLUT_BUILD_STATIC_LIBS=ON
        -DFREEGLUT_GLES=OFF
        -DINSTALL_PDB=OFF
        )


externalproject_add(Target_Lua
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Lua
        DOWNLOAD_COMMAND ${CMAKE_COMMAND} -E true
        UPDATE_COMMAND ${CMAKE_COMMAND} -E true
        PATCH_COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_MODULE_PATH}/lua.cmake ${DEPS_SOURCE_LOCATION}/Target_Lua/CMakeLists.txt
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DLUA_EXE=OFF
        -DLUA_DOC=OFF
        -DLUA_BUILD_WLUA=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DLUA_USE_READLINE=OFF
        -DLUA_USE_RELATIVE_LOADLIB=OFF
        -DLUA_USE_POSIX=OFF
        -DLUA_USE_DLOPEN=OFF
        -DLUA_VERSION=v5.4.4
        )


externalproject_add(Target_sol2
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_Lua
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_sol2
        GIT_REPOSITORY https://github.com/ThePhD/sol2.git
        GIT_TAG v3.3.0
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DSOL2_BUILD_LUA=ON
        -DBUILD_LUA_AS_DLL=OFF
        )


externalproject_add(Target_filesystem
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_filesystem
        GIT_REPOSITORY https://github.com/gulrak/filesystem.git
        GIT_TAG v1.5.12
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DGHC_FILESYSTEM_BUILD_TESTING=OFF
        -DGHC_FILESYSTEM_BUILD_EXAMPLES=OFF
        )


externalproject_add(Target_GoogleTest
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_GoogleTest
        GIT_REPOSITORY https://github.com/google/googletest.git
        GIT_TAG v1.12.0
        GIT_SHALLOW ${EXTERNAL_GIT_SHALLOW}
        GIT_PROGRESS ${EXTERNAL_GIT_PROGRESS}
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        -Dgtest_force_shared_crt=ON
        ${DEPS_CMAKE_FLAGS}
        )


externalproject_add(Target_GoogleBenchmark
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_GoogleBenchmark
        GIT_REPOSITORY https://github.com/google/benchmark.git
        GIT_TAG v1.7.0
        GIT_SHALLOW ${EXTERNAL_GIT_SHALLOW}
        GIT_PROGRESS ${EXTERNAL_GIT_PROGRESS}
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DBENCHMARK_ENABLE_TESTING=OFF
        )


externalproject_add(Target_json
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_json
        GIT_REPOSITORY https://github.com/nlohmann/json.git
        GIT_TAG v3.11.2
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DJSON_BuildTests=OFF
        )


set(INI_CHDIR ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/Target_ini)
externalproject_add(Target_ini
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_ini
        GIT_REPOSITORY https://github.com/jhpy1024/ini_parser
        GIT_TAG cd52297c5ad5c8f1bd622fee45b7ea0301bcb856
        GIT_SHALLOW false
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E true
        BUILD_COMMAND ${CMAKE_COMMAND} -E true
        INSTALL_COMMAND ${INI_CHDIR} ${CMAKE_COMMAND} -E copy ini_parser.hpp ${DEPS_INCLUDE_DIR}
        )


externalproject_add(Target_yaml-cpp
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_yaml-cpp
        GIT_REPOSITORY https://github.com/jbeder/yaml-cpp.git
        GIT_TAG yaml-cpp-0.7.0
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DCMAKE_DEBUG_POSTFIX=
        -DYAML_CPP_BUILD_TOOLS=OFF
        -DYAML_BUILD_SHARED_LIBS=OFF
        -DYAML_CPP_BUILD_TESTS=OFF
        )


set(ASIO_CHDIR ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/Target_asio)
externalproject_add(Target_asio
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_asio
        GIT_REPOSITORY https://github.com/chriskohlhoff/asio.git
        GIT_TAG asio-1-22-1
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E true
        BUILD_COMMAND ${ASIO_CHDIR} ${CMAKE_COMMAND} -E copy_directory asio/include/asio ${DEPS_INCLUDE_DIR}/asio
        INSTALL_COMMAND ${ASIO_CHDIR} ${CMAKE_COMMAND} -E copy asio/include/asio.hpp asio/include/asio ${DEPS_INCLUDE_DIR}
        )


externalproject_add(Target_OpenSSL
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OpenSSL
        GIT_REPOSITORY https://github.com/janbar/openssl-cmake.git
        GIT_TAG 1.1.1n-20220327
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DWITH_APPS=OFF
        )


externalproject_add(Target_entt
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_entt
        GIT_REPOSITORY https://github.com/skypjack/entt.git
        GIT_TAG v3.10.3
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DENTT_INCLUDE_HEADERS=ON
        -DENTT_INCLUDE_NATVIS=ON
        -DENTT_BUILD_TESTING=OFF
        -DENTT_BUILD_BENCHMARK=OFF
        -DENTT_BUILD_EXAMPLE=OFF
        -DENTT_BUILD_DOCS=OFF
        )


externalproject_add(Target_opencv
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_opencv
        GIT_REPOSITORY https://github.com/opencv/opencv.git
        GIT_TAG 4.6.0
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${SKIP_DOWNLOAD}
        CMAKE_ARGS
        -G "${CMAKE_GENERATOR}"
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        ${DEPS_CMAKE_FLAGS}
        -DOPENCV_FORCE_3RDPARTY_BUILD=OFF
        -DBUILD_ZLIB=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_opencv_apps=OFF
        -DBUILD_EXAMPLES=OFF
        -DBUILD_TESTS=OFF
        -DBUILD_DOCS=OFF
        )


# list of dependency targets
list(APPEND DEP_TARGETS Target_zlib)
list(APPEND DEP_TARGETS Target_Lua)
list(APPEND DEP_TARGETS Target_sol2)
list(APPEND DEP_TARGETS Target_pugixml)
list(APPEND DEP_TARGETS Target_FreeType)
list(APPEND DEP_TARGETS Target_OpenAL)
list(APPEND DEP_TARGETS Target_Ogg)
list(APPEND DEP_TARGETS Target_Vorbis)
list(APPEND DEP_TARGETS Target_Bullet)
list(APPEND DEP_TARGETS Target_SDL2)
list(APPEND DEP_TARGETS Target_OGRE)
add_custom_target(contrib COMMAND ${CMAKE_COMMAND} -E touch ${STAMP_FILE} DEPENDS ${DEP_TARGETS})
