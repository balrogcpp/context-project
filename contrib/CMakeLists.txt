# cmake min version
cmake_minimum_required(VERSION 3.18.0)


# project
project(CONTRIB)


# externalproject_add and c++ flags
include(ExternalProject)
include(CppFlags)


# externalproject_add require git
find_package(Git REQUIRED)


# cached variables
string(TOLOWER ${TOOLCHAIN_FULL} TOOLCHAIN_FULL_LOWER)
string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_LOWER)
set(DEPS_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/sdk/${TOOLCHAIN_FULL_LOWER}_${CMAKE_BUILD_TYPE_LOWER} CACHE PATH "")
set(BUILD_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/build/${TOOLCHAIN_FULL_LOWER}_${CMAKE_BUILD_TYPE_LOWER}/src)
set(DEPS_PREFIX_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/build/${TOOLCHAIN_FULL_LOWER}_${CMAKE_BUILD_TYPE_LOWER})
set(DEPS_SOURCE_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/download)
set(DEPS_PATCH_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/patch)
set(DEPS_INCLUDE_DIR ${DEPS_ROOT}/include CACHE PATH "")
set(DEPS_LIB_DIR ${DEPS_ROOT}/lib CACHE PATH "")
set(DEPS_BIN_DIR ${DEPS_ROOT}/bin CACHE PATH "")
set(DEPS_CXX_FLAGS ${CMAKE_CXX_FLAGS})
set(DEPS_C_FLAGS ${CMAKE_C_FLAGS})
set(DEPS_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})
set(DEPS_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS})
set(DEPS_STATIC_LINKER_FLAGS ${CMAKE_STATIC_LINKER_FLAGS})
list(APPEND CMAKE_PREFIX_PATH ${DEPS_ROOT})
list(APPEND CMAKE_FIND_ROOT_PATH ${DEPS_ROOT})


# receives target name and defines STAMP_FILE, UPDATE_PLACEHOLDER and PATCH_PLACEHOLDER commands
macro(check_stamp TARGET)
    set(STAMP_FILE_DOWNLOAD ${DEPS_SOURCE_LOCATION}/${TARGET}_download)
    set(UPDATE_PLACEHOLDER ${CMAKE_COMMAND} -E true)
    set(PATCH_PLACEHOLDER ${CMAKE_COMMAND} -E true)
    set(CREATE_DOWNLOAD_STAMP ${CMAKE_COMMAND} -E touch ${STAMP_FILE_DOWNLOAD})
    set(CREATE_PATCH_STAMP ${CMAKE_COMMAND} -E true)

    if (NOT CMAKE_CROSSCOMPILING)
        set(BUILD_PLACEHOLDER ${CMAKE_COMMAND} -E true)
        set(CONFIGURE_PLACEHOLDER ${CMAKE_COMMAND} -E true)
        set(INSTALL_PLACEHOLDER ${CMAKE_COMMAND} -E true)
    else ()
        unset(BUILD_PLACEHOLDER)
        unset(CONFIGURE_PLACEHOLDER)
        unset(INSTALL_PLACEHOLDER)
    endif ()

    if (EXISTS ${STAMP_FILE_DOWNLOAD} AND NOT IS_DIRECTORY ${STAMP_FILE_DOWNLOAD})
        set(DOWNLOAD_PLACEHOLDER ${CMAKE_COMMAND} -E true)
        set(DOWNLOAD_PLACEHOLDER ${CMAKE_COMMAND} -E true)
    else ()
        unset(DOWNLOAD_PLACEHOLDER)
    endif ()
endmacro()


# same as check_stamp but also applies patch file after update
macro(check_stamp_patch TARGET PATCH)
    set(STAMP_FILE_DOWNLOAD ${DEPS_SOURCE_LOCATION}/${TARGET}_download)
    set(STAMP_FILE_PATCH ${DEPS_SOURCE_LOCATION}/${TARGET}_patch)
    set(CREATE_DOWNLOAD_STAMP ${CMAKE_COMMAND} -E touch ${STAMP_FILE_DOWNLOAD})
    set(CREATE_PATCH_STAMP ${CMAKE_COMMAND} -E touch ${STAMP_FILE_PATCH})

    if (NOT EXISTS ${DEPS_PATCH_LOCATION}/${PATCH})
        message(FATAL_ERROR "Patch file ${PATCH} not found")
    endif ()

    if (NOT CMAKE_CROSSCOMPILING)
        set(BUILD_PLACEHOLDER ${CMAKE_COMMAND} -E true)
        set(CONFIGURE_PLACEHOLDER ${CMAKE_COMMAND} -E true)
        set(INSTALL_PLACEHOLDER ${CMAKE_COMMAND} -E true)
    else ()
        unset(BUILD_PLACEHOLDER)
        unset(CONFIGURE_PLACEHOLDER)
        unset(INSTALL_PLACEHOLDER)
    endif ()

    if (EXISTS ${STAMP_FILE_DOWNLOAD} AND NOT IS_DIRECTORY ${STAMP_FILE_DOWNLOAD})
        set(DOWNLOAD_PLACEHOLDER ${CMAKE_COMMAND} -E true)
    else ()
        unset(DOWNLOAD_PLACEHOLDER)
    endif ()

    if (EXISTS ${STAMP_FILE_PATCH} AND NOT IS_DIRECTORY ${STAMP_FILE_PATCH})
        set(UPDATE_PLACEHOLDER ${CMAKE_COMMAND} -E true)
        set(PATCH_PLACEHOLDER ${CMAKE_COMMAND} -E true)
    else ()
        set(UPDATE_PLACEHOLDER ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/${TARGET} ${GIT_EXECUTABLE} reset --hard)
        set(PATCH_PLACEHOLDER ${CMAKE_COMMAND} -E chdir ${DEPS_SOURCE_LOCATION}/${TARGET} ${GIT_EXECUTABLE} apply --unidiff-zero ${DEPS_PATCH_LOCATION}/${PATCH})
    endif ()
endmacro()


# list of third-party targets
check_stamp_patch(Target_SDL2 sdl2-2.26.1.patch)
externalproject_add(Target_SDL2
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_SDL2
        GIT_REPOSITORY https://github.com/libsdl-org/SDL.git
        GIT_TAG release-2.30.1
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DSDL_SHARED_ENABLED_BY_DEFAULT=OFF
        -DSDL_TEST=OFF
        -DSDL_WERROR=OFF
        -DLIBC=ON
        -DSDL_LIBC=ON
        -DSDL_DIRECTX=ON
        -DRENDER_METAL=OFF
        -DSDL_RENDER_METAL=OFF
        -DSDL_METAL=OFF
        -DSDL_VULKAN=ON
        -DHIDAPI=OFF
        -DSDL_HIDAPI=OFF
        -DSDL_HIDAPI_JOYSTICK=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp(Target_Bullet)
externalproject_add(Target_Bullet
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Bullet
        GIT_REPOSITORY https://github.com/bulletphysics/bullet3.git
        GIT_TAG 3.25
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DCMAKE_RELWITHDEBINFO_POSTFIX=
        -DCMAKE_DEBUG_POSTFIX=
        -DCMAKE_RELEASE_POSTFIX=
        -DCMAKE_MINSIZEREL_POSTFIX=
        -DCLAMP_VELOCITIES=0
        -DBULLET2_MULTITHREADING=ON
        -DBUILD_BULLET2_DEMOS=OFF
        -DBUILD_OPENGL3_DEMOS=OFF
        -DBUILD_CPU_DEMOS=OFF
        -DBUILD_EXTRAS=OFF
        -DBUILD_ENET=OFF
        -DBUILD_CLSOCKET=OFF
        -DUSE_GRAPHICAL_BENCHMARK=OFF
        -DBUILD_UNIT_TESTS=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DUSE_SOFT_BODY_MULTI_BODY_DYNAMICS_WORLD=OFF
        -DINSTALL_LIBS=ON
        -DUSE_MSVC_RUNTIME_LIBRARY_DLL=ON
        -DUSE_MSVC_SSE2=ON
        -DUSE_MSVC_AVX=OFF
        -DUSE_MSVC_FAST_FLOATINGPOINT=ON
        -DINTERNAL_CREATE_MSVC_RELATIVE_PATH_PROJECTFILES=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp_patch(Target_OpenAL openal-1.23.1.patch)
externalproject_add(Target_OpenAL
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OpenAL
        GIT_REPOSITORY https://github.com/kcat/openal-soft.git
        GIT_TAG 1.23.1
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DALSOFT_TESTS=OFF
        -DALSOFT_UTILS=OFF
        -DALSOFT_EXAMPLES=OFF
        -DALSOFT_CONFIG=OFF
        -DALSOFT_EAX=OFF
        -DALSOFT_BACKEND_SDL2=OFF
        -DALSOFT_BACKEND_SNDIO=OFF
        -DALSOFT_BACKEND_WASAPI=OFF
        -DALSOFT_BACKEND_WINMM=OFF
        -DALSOFT_BACKEND_WAVE=OFF
        -DALSOFT_BACKEND_OSS=OFF
        -DALSOFT_BACKEND_JACK=OFF
        -DLIBTYPE=SHARED
        -DALSOFT_OSX_FRAMEWORK=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp_patch(Target_Ogg ogg-1.3.5.patch)
externalproject_add(Target_Ogg
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_OpenAL
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Ogg
        GIT_REPOSITORY https://github.com/xiph/ogg.git
        GIT_TAG v1.3.5
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DINSTALL_DOCS=OFF
        -DINSTALL_PKG_CONFIG_MODULE=OFF
        -DINSTALL_CMAKE_PACKAGE_MODULE=ON
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_FRAMEWORK=OFF
        -DBUILD_TESTING=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp(Target_Vorbis)
externalproject_add(Target_Vorbis
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_Ogg
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Vorbis
        GIT_REPOSITORY https://github.com/xiph/vorbis.git
        GIT_TAG v1.3.7
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DOGG_INCLUDE_DIR=${DEPS_ROOT}/include
        -DOGG_LIBRARY=${DEPS_ROOT}/lib/libogg.a
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp(Target_Theora)
externalproject_add(Target_Theora
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_Ogg
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Theora
        GIT_REPOSITORY https://github.com/xiph/theora.git
        GIT_TAG 7180717276af1ebc7da15c83162d6c5d6203aabf
        GIT_SHALLOW false
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DEPS_PATCH_LOCATION}/theora.cmake ${DEPS_SOURCE_LOCATION}/Target_Theora/CMakeLists.txt
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DEPS_PATCH_LOCATION}/FindOgg.cmake ${DEPS_SOURCE_LOCATION}/Target_Theora/cmake/FindOgg.cmake
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DOGG_INCLUDE_DIR=${DEPS_ROOT}/include
        -DOGG_LIBRARY=${DEPS_ROOT}/lib/libogg.a
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp(Target_zlib)
externalproject_add(Target_zlib
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_zlib
        GIT_REPOSITORY https://github.com/madler/zlib.git
        GIT_TAG v1.3.1
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DBUILD_SHARED_LIBS=OFF
        -DCMAKE_DEBUG_POSTFIX=
        -DAMD64=OFF
        -DASM686=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CMAKE_COMMAND} -E chdir ${DEPS_ROOT} ${CMAKE_COMMAND} -E rm -rf
        lib/libz.so lib/libzlib.dll.a lib/zlib.lib lib/zlibd.lib bin/libzlib.dll bin/zlib.dll bin/zlibd.dll lib/libz.dylib
        COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp_patch(Target_assimp assimp-5.3.1.patch)
externalproject_add(Target_assimp
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_zlib
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_assimp
        GIT_REPOSITORY https://github.com/assimp/assimp.git
        GIT_TAG v5.3.1
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DASSIMP_HUNTER_ENABLED=OFF
        -DASSIMP_BUILD_ZLIB=OFF
        -DASSIMP_BUILD_MINIZIP=OFF
        -DASSIMP_WARNINGS_AS_ERRORS=OFF
        -DASSIMP_BUILD_SAMPLES=OFF
        -DASSIMP_INSTALL_PDB=OFF
        -DINJECT_DEBUG_POSTFIX=OFF
        -DASSIMP_INJECT_DEBUG_POSTFIX=OFF
        -DASSIMP_IGNORE_GIT_HASH=ON
        -DASSIMP_BUILD_TESTS=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
        -DASSIMP_NO_EXPORT=ON
        -DASSIMP_BUILD_AMF_IMPORTER=OFF
        -DASSIMP_BUILD_3DS_IMPORTER=OFF
        -DASSIMP_BUILD_AC_IMPORTER=OFF
        -DASSIMP_BUILD_ASE_IMPORTER=OFF
        -DASSIMP_BUILD_ASSBIN_IMPORTER=OFF
        -DASSIMP_BUILD_ASSXML_IMPORTER=OFF
        -DASSIMP_BUILD_B3D_IMPORTER=OFF
        -DASSIMP_BUILD_BVH_IMPORTER=OFF
        -DASSIMP_BUILD_COLLADA_IMPORTER=OFF
        -DASSIMP_BUILD_DXF_IMPORTER=OFF
        -DASSIMP_BUILD_CSM_IMPORTER=OFF
        -DASSIMP_BUILD_HMP_IMPORTER=OFF
        -DASSIMP_BUILD_IRRMESH_IMPORTER=OFF
        -DASSIMP_BUILD_IRR_IMPORTER=OFF
        -DASSIMP_BUILD_LWO_IMPORTER=OFF
        -DASSIMP_BUILD_LWS_IMPORTER=OFF
        -DASSIMP_BUILD_MD2_IMPORTER=OFF
        -DASSIMP_BUILD_MD3_IMPORTER=OFF
        -DASSIMP_BUILD_MD5_IMPORTER=OFF
        -DASSIMP_BUILD_MDC_IMPORTER=OFF
        -DASSIMP_BUILD_MDL_IMPORTER=OFF
        -DASSIMP_BUILD_NFF_IMPORTER=OFF
        -DASSIMP_BUILD_NDO_IMPORTER=OFF
        -DASSIMP_BUILD_OFF_IMPORTER=OFF
        -DASSIMP_BUILD_OBJ_IMPORTER=ON
        -DASSIMP_BUILD_OGRE_IMPORTER=OFF
        -DASSIMP_BUILD_OPENGEX_IMPORTER=OFF
        -DASSIMP_BUILD_PLY_IMPORTER=OFF
        -DASSIMP_BUILD_MS3D_IMPORTER=OFF
        -DASSIMP_BUILD_COB_IMPORTER=OFF
        -DASSIMP_BUILD_BLEND_IMPORTER=OFF
        -DASSIMP_BUILD_IFC_IMPORTER=OFF
        -DASSIMP_BUILD_XGL_IMPORTER=OFF
        -DASSIMP_BUILD_XGL_IMPORTER=OFF
        -DASSIMP_BUILD_FBX_IMPORTER=ON
        -DASSIMP_BUILD_Q3D_IMPORTER=OFF
        -DASSIMP_BUILD_Q3BSP_IMPORTER=OFF
        -DASSIMP_BUILD_RAW_IMPORTER=OFF
        -DASSIMP_BUILD_SIB_IMPORTER=OFF
        -DASSIMP_BUILD_SMD_IMPORTER=OFF
        -DASSIMP_BUILD_STL_IMPORTER=OFF
        -DASSIMP_BUILD_TERRAGEN_IMPORTER=OFF
        -DASSIMP_BUILD_3D_IMPORTER=OFF
        -DASSIMP_BUILD_X_IMPORTER=OFF
        -DASSIMP_BUILD_X3D_IMPORTER=OFF
        -DASSIMP_BUILD_GLTF_IMPORTER=ON
        -DASSIMP_BUILD_3MF_IMPORTER=OFF
        -DASSIMP_BUILD_MMD_IMPORTER=OFF
        -DASSIMP_BUILD_STEP_IMPORTER=OFF
        -DASSIMP_BUILD_M3D_IMPORTER=OFF
        -DASSIMP_BUILD_IQM_IMPORTER=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp(Target_imgui)
externalproject_add(Target_imgui
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_imgui
        GIT_REPOSITORY https://github.com/ocornut/imgui.git
        GIT_TAG v1.90.4
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E true
        BUILD_COMMAND ${CMAKE_COMMAND} -E true
        INSTALL_COMMAND ${CMAKE_COMMAND} -E true
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp_patch(Target_OGRE ogre-14.2.0.patch)
externalproject_add(Target_OGRE
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_imgui
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_OGRE
        GIT_REPOSITORY https://github.com/OGRECave/ogre.git
        GIT_TAG v14.2.1
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DCMAKE_C_FLAGS=${DEPS_C_FLAGS}
        -DCMAKE_CXX_FLAGS=${DEPS_CXX_FLAGS}
        -DCMAKE_EXE_LINKER_FLAGS=${DEPS_EXE_LINKER_FLAGS}
        -DCMAKE_SHARED_LINKER_FLAGS=${DEPS_SHARED_LINKER_FLAGS}
        -DCMAKE_STATIC_LINKER_FLAGS=${DEPS_STATIC_LINKER_FLAGS}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DOGRE_STATIC=ON
        -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
        -DOGRE_DEPENDENCIES_DIR=${DEPS_ROOT}
        -DOGRE_ENABLE_PRECOMPILED_HEADERS=ON
        -DOGRE_BUILD_LIBS_AS_FRAMEWORKS=OFF
        -DOGRE_ASSERT_MODE=2
        -DOGRE_CONFIG_THREADS=3
        -DOGRE_CONFIG_THREAD_PROVIDER=std
        -DOGRE_CONFIG_DOUBLE=OFF
        -DOGRE_CONFIG_NODE_INHERIT_TRANSFORM=OFF
        -DOGRE_NODELESS_POSITIONING=OFF
        -DOGRE_CONFIG_ENABLE_MESHLOD=ON
        -DOGRE_CONFIG_ENABLE_DDS=ON
        -DOGRE_CONFIG_ENABLE_PVRTC=OFF
        -DOGRE_CONFIG_ENABLE_ETC=OFF
        -DOGRE_CONFIG_ENABLE_ASTC=OFF
        -DOGRE_CONFIG_ENABLE_QUAD_BUFFER_STEREO=OFF
        -DOGRE_CONFIG_ENABLE_ZIP=ON
        -DOGRE_CONFIG_ENABLE_VIEWPORT_ORIENTATIONMODE=OFF
        -DOGRE_BUILD_COMPONENT_PYTHON=OFF
        -DOGRE_BUILD_COMPONENT_JAVA=OFF
        -DOGRE_BUILD_COMPONENT_CSHARP=OFF
        -DOGRE_RESOURCEMANAGER_STRICT=2
        -DOGRE_BUILD_RENDERSYSTEM_D3D11=ON
        -DOGRE_BUILD_RENDERSYSTEM_D3D9=OFF
        -DOGRE_BUILD_PLUGIN_CG=OFF
        -DOGRE_BUILD_PLUGIN_GLSLANG=OFF
        -DOGRE_BUILD_RENDERSYSTEM_METAL=OFF
        -DOGRE_BUILD_RENDERSYSTEM_GL3PLUS=ON
        -DOGRE_BUILD_RENDERSYSTEM_GLES2=ON
        -DOGRE_BUILD_RENDERSYSTEM_GL=OFF
        -DOGRE_CONFIG_ENABLE_GLES3_SUPPORT=ON
        -DOGRE_CONFIG_ENABLE_GLES2_CG_SUPPORT=OFF
        -DOGRE_CONFIG_ENABLE_GL_STATE_CACHE_SUPPORT=ON
        -DOGRE_CONFIG_ENABLE_GLES2_GLSL_OPTIMISER=OFF
        -DOGRE_BUILD_RENDERSYSTEM_VULKAN=OFF
        -DOGRE_BUILD_RENDERSYSTEM_TINY=OFF
        -DOGRE_BUILD_COMPONENT_OVERLAY=ON
        -DOGRE_BUILD_COMPONENT_OVERLAY_IMGUI=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_Freetype=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_FreeImage=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_SDL2=ON
        -DIMGUI_DIR=${DEPS_SOURCE_LOCATION}/Target_imgui
        -DOGRE_BUILD_COMPONENT_BITES=OFF
        -DOGRE_BUILD_COMPONENT_BULLET=OFF
        -DOGRE_BITES_STATIC_PLUGINS=ON
        -DOGRE_BUILD_COMPONENT_PAGING=ON
        -DOGRE_BUILD_COMPONENT_MESHLODGENERATOR=ON
        -DOGRE_BUILD_COMPONENT_PROPERTY=OFF
        -DOGRE_BUILD_COMPONENT_VOLUME=ON
        -DOGRE_BUILD_COMPONENT_TERRAIN=ON
        -DOGRE_BUILD_PLUGIN_FREEIMAGE=OFF
        -DOGRE_BUILD_PLUGIN_EXRCODEC=OFF
        -DOGRE_BUILD_PLUGIN_ASSIMP=OFF
        -DOGRE_BUILD_PLUGIN_STBI=ON
        -DOGRE_BUILD_PLUGIN_RSIMAGE=OFF
        -DOGRE_BUILD_PLUGIN_BSP=OFF
        -DOGRE_BUILD_PLUGIN_PCZ=OFF
        -DOGRE_BUILD_PLUGIN_PFX=ON
        -DOGRE_BUILD_PLUGIN_OCTREE=ON
        -DOGRE_BUILD_PLUGIN_DOT_SCENE=OFF
        -DOGRE_BUILD_COMPONENT_HLMS=OFF
        -DOGRE_BUILD_COMPONENT_RTSHADERSYSTEM=ON
        -DOGRE_BUILD_RTSHADERSYSTEM_SHADERS=ON
        -DOGRE_BUILD_DEPENDENCIES=OFF
        -DOGRE_BUILD_SAMPLES=OFF
        -DOGRE_INSTALL_SAMPLES_SOURCE=OFF
        -DOGRE_INSTALL_SAMPLES=OFF
        -DOGRE_BUILD_TOOLS=OFF
        -DOGRE_BUILD_XSIEXPORTER=OFF
        -DOGRE_INSTALL_PDB=OFF
        -DOGRE_INSTALL_DOCS=OFF
        -DOGRE_BUILD_TESTS=OFF
        -DOGRE_BUILD_LIBS_AS_FRAMEWORKS=OFF
        -DOGRE_BUILD_PLATFORM_APPLE_IOS=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${DEPS_SOURCE_LOCATION}/Target_OGRE/RenderSystems/GLSupport/include/GLSL
        ${DEPS_ROOT}/include/OGRE/RenderSystems/GLES2/GLSL
        COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp(Target_Lua)
externalproject_add(Target_Lua
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_Lua
        DOWNLOAD_COMMAND ${CMAKE_COMMAND} -E true
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DEPS_PATCH_LOCATION}/lua.cmake ${DEPS_SOURCE_LOCATION}/Target_Lua/CMakeLists.txt
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DEPS_PATCH_LOCATION}/FindReadline.cmake ${DEPS_SOURCE_LOCATION}/Target_Lua/cmake/FindReadline.cmake
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DLUA_VERSION=5.4.4
        -DLUA_EXE=OFF
        -DLUA_DOC=OFF
        -DLUA_BUILD_WLUA=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DLUA_USE_READLINE=OFF
        -DLUA_USE_RELATIVE_LOADLIB=OFF
        -DLUA_USE_POSIX=OFF
        -DLUA_USE_DLOPEN=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp_patch(Target_sol2 sol2-3.3.0.patch)
externalproject_add(Target_sol2
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_Lua
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_sol2
        GIT_REPOSITORY https://github.com/ThePhD/sol2.git
        GIT_TAG v3.3.0
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DSOL2_LUA_VERSION=5.4.4
        -DLUA_INCLUDE_DIR=${DEPS_INCLUDE_DIR}
        -DLUA_LIBRARIES=lua
        -DSOL2_BUILD_LUA=OFF
        -DBUILD_LUA_AS_DLL=OFF
        -DLUA_FOUND=ON
        -DCREATE_LUALIB_TARGET=OFF
        -DCMAKE_DISABLE_FIND_PACKAGE_Lua=ON
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp(Target_LibreSSL)
externalproject_add(Target_LibreSSL
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_LibreSSL
        #URL https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.8.0.tar.gz
        #DOWNLOAD_NO_PROGRESS true
        GIT_REPOSITORY https://github.com/PowerShell/LibreSSL.git
        GIT_TAG V3.8.2.0
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${CMAKE_COMMAND} -P ${DEPS_PATCH_LOCATION}/PatchLibreSSL.cmake
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DBUILD_SHARED_LIBS=OFF
        -DLIBRESSL_SKIP_INSTALL=OFF
        -DLIBRESSL_APPS=OFF
        -DLIBRESSL_TESTS=OFF
        -DENABLE_ASM=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp_patch(Target_cpr cpr-1.10.5.patch)
externalproject_add(Target_cpr
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS
        DEPENDS Target_LibreSSL
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_cpr
        GIT_REPOSITORY https://github.com/libcpr/cpr.git
        GIT_TAG 1.10.5
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DBUILD_SHARED_LIBS=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp_patch(Target_enet enet-1.3.17.patch)
externalproject_add(Target_enet
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_enet
        GIT_REPOSITORY https://github.com/lsalzman/enet.git
        GIT_TAG v1.3.17
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp(Target_protoc)
externalproject_add(Target_protoc
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_protobuf
        GIT_REPOSITORY https://github.com/protocolbuffers/protobuf.git
        GIT_TAG v25.3
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CONFIGURE_COMMAND ${CONFIGURE_PLACEHOLDER}
        BUILD_COMMAND ${BUILD_PLACEHOLDER}
        INSTALL_COMMAND ${INSTALL_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DCMAKE_CXX_STANDARD=17
        -DABSL_PROPAGATE_CXX_STD=ON
        -Dprotobuf_BUILD_TESTS=OFF
        -Dprotobuf_BUILD_PROTOBUF_BINARIES=ON
        -Dprotobuf_BUILD_PROTOC_BINARIES=ON
        -Dprotobuf_BUILD_SHARED_LIBS=OFF
        -Dprotobuf_MSVC_STATIC_RUNTIME=OFF
        -Dprotobuf_WITH_ZLIB=OFF
        -Dprotobuf_DISABLE_RTTI=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


if (NOT CMAKE_CROSSCOMPILING)
    set(PROTOC_BIN ON)
    set(PROTOC_TARGET)
else ()
    set(PROTOC_BIN OFF)
    set(PROTOC_TARGET Target_protoc)
endif ()
check_stamp(Target_protobuf)
externalproject_add(Target_protobuf
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_protoc
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_protobuf
        GIT_REPOSITORY https://github.com/protocolbuffers/protobuf.git
        GIT_TAG v25.3
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${CMAKE_COMMAND} -E true
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DCMAKE_CXX_STANDARD=17
        -DABSL_PROPAGATE_CXX_STD=ON
        -Dprotobuf_BUILD_TESTS=OFF
        -Dprotobuf_BUILD_PROTOBUF_BINARIES=ON
        -Dprotobuf_BUILD_PROTOC_BINARIES=${PROTOC_BIN}
        -Dprotobuf_BUILD_SHARED_LIBS=OFF
        -Dprotobuf_MSVC_STATIC_RUNTIME=OFF
        -Dprotobuf_WITH_ZLIB=OFF
        -Dprotobuf_DISABLE_RTTI=OFF
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


check_stamp_patch(Target_GameNetworkingSockets gns-1.4.1.patch)
externalproject_add(Target_GameNetworkingSockets
        EXCLUDE_FROM_ALL true
        BUILD_ALWAYS false
        BUILD_IN_SOURCE false
        DEPENDS Target_LibreSSL Target_protobuf
        PREFIX ${DEPS_PREFIX_LOCATION}
        DOWNLOAD_DIR ${DEPS_SOURCE_LOCATION}
        SOURCE_DIR ${DEPS_SOURCE_LOCATION}/Target_GameNetworkingSockets
        GIT_REPOSITORY https://github.com/ValveSoftware/GameNetworkingSockets.git
        GIT_TAG v1.4.1
        GIT_SHALLOW true
        GIT_PROGRESS false
        DOWNLOAD_COMMAND ${DOWNLOAD_PLACEHOLDER}
        UPDATE_COMMAND ${UPDATE_PLACEHOLDER}
        COMMAND ${CREATE_DOWNLOAD_STAMP}
        PATCH_COMMAND ${PATCH_PLACEHOLDER}
        CMAKE_ARGS
        -G ${CMAKE_GENERATOR}
        -DCMAKE_INSTALL_PREFIX=${DEPS_ROOT}
        -DCMAKE_FIND_ROOT_PATH=${DEPS_ROOT}
        -DCMAKE_PREFIX_PATH=${DEPS_ROOT}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DANDROID_NDK=${ANDROID_NDK}
        -DANDROID_ABI=${ANDROID_ABI}
        -DANDROID_PLATFORM=${ANDROID_PLATFORM}
        -DBUILD_SHARED_LIB=OFF
        -DBUILD_EXAMPLES=OFF
        -DBUILD_TESTS=OFF
        -DBUILD_TOOLS=OFF
        -DENABLE_ICE=OFF
        -DUSE_CRYPTO25519=Reference
        TEST_AFTER_INSTALL ON
        TEST_COMMAND ${CREATE_PATCH_STAMP}
)


# list of dependency targets
add_custom_target(Contrib COMMAND ${CMAKE_COMMAND} -E rm -rf ${DEPS_PREFIX_LOCATION})
if (NOT EMSCRIPTEN)
    add_dependencies(Contrib Target_SDL2)
    add_dependencies(Contrib Target_OpenAL)
    add_dependencies(Contrib Target_Theora)
endif ()
add_dependencies(Contrib Target_cpr)
#add_dependencies(Contrib Target_GameNetworkingSockets)
add_dependencies(Contrib Target_sol2)
add_dependencies(Contrib Target_Vorbis)
add_dependencies(Contrib Target_Bullet)
add_dependencies(Contrib Target_OGRE)
